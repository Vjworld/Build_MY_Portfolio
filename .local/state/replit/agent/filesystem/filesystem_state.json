{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Vaibhav Selukar Portfolio & Blog Platform\n\n## Overview\n\nThis is a full-stack professional portfolio and blog platform built for Vaibhav Selukar, featuring a modern React frontend with TypeScript, Express.js backend, and PostgreSQL database. The application serves as both a personal portfolio showcase and a content management system with blog capabilities, community features, and admin controls.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack**: React 18 with TypeScript, built using Vite for development and bundling.\n\n**UI Framework**: Built on shadcn/ui components with Radix UI primitives, providing a consistent design system. Uses Tailwind CSS for styling with custom CSS variables for theming support.\n\n**State Management**: React Query (TanStack Query) handles server state management, API caching, and data synchronization. Local component state managed with React hooks.\n\n**Routing**: Uses Wouter for client-side routing, providing a lightweight alternative to React Router.\n\n**Form Handling**: React Hook Form with Zod validation schemas for type-safe form validation and submission.\n\n### Backend Architecture\n\n**Server Framework**: Express.js with TypeScript, providing RESTful API endpoints for all application features.\n\n**Database Layer**: Drizzle ORM with Neon PostgreSQL database, offering type-safe database operations and automatic schema migrations.\n\n**Session Management**: Express sessions with PostgreSQL session store for persistent user sessions.\n\n**API Structure**: Organized around feature modules (portfolio, blog, community, admin) with consistent error handling middleware.\n\n### Authentication & Authorization\n\n**Authentication Provider**: Replit OIDC integration for secure user authentication using OpenID Connect protocol.\n\n**Authorization Model**: Role-based access control with admin privileges for content management operations.\n\n**Session Security**: HTTP-only cookies with secure flags and CSRF protection through session-based authentication.\n\n### Data Architecture\n\n**Database Design**: PostgreSQL with the following core entities:\n- Users (authentication and profile data)\n- Portfolio sections (dynamic content management)\n- Blog posts with comments and engagement features\n- Community features (forums, contests, FAQs)\n- Contact messages and admin communications\n\n**Schema Management**: Drizzle migrations handle database schema versioning and updates.\n\n**Data Validation**: Zod schemas ensure type safety between frontend and backend, with shared validation rules.\n\n### Content Management\n\n**Portfolio Management**: Dynamic sections with configurable content types, visibility controls, and ordering capabilities.\n\n**Blog System**: Full-featured blog with rich text content, categorization, tagging, and comment systems.\n\n**Admin Dashboard**: Comprehensive admin interface for content management, user interactions, and platform analytics.\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Replit Platform**: Development environment and potential hosting platform\n\n### Authentication & Security\n- **Replit OIDC**: OpenID Connect authentication provider\n- **OpenID Client**: OAuth 2.0/OIDC client library for authentication flows\n\n### Frontend Libraries\n- **React Query**: Server state management and API layer\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Backend Services\n- **Drizzle ORM**: Type-safe database toolkit\n- **Express Session**: Session management middleware\n- **Zod**: Schema validation and type inference\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Static type checking across the stack\n- **ESBuild**: Backend bundling for production builds","size_bytes":3938},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        success: \"hsl(var(--success))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        playfair: [\"var(--font-playfair)\"],\n        inter: [\"var(--font-inter)\"],\n        source: [\"var(--font-source)\"],\n        sans: [\"var(--font-source)\"],\n        serif: [\"var(--font-playfair)\"],\n        mono: [\"var(--font-inter)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3083},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/seed-professional-data.ts":{"content":"import { storage } from \"../server/storage\";\n\n// Professional data extracted from Vaibhav's documents\nconst professionalData = {\n  // Employment Experience from documents\n  employmentExperience: [\n    {\n      company: \"RightZero\",\n      position: \"Founder / Director / Senior Consultant - Project Management Office\",\n      location: \"Nagpur\",\n      startDate: \"2024-01-01\",\n      endDate: \"2024-07-31\",\n      isCurrent: false,\n      description: \"Founded and led a project management consultancy, collaborating with cross-functional teams and developing SaaS solutions.\",\n      achievements: [\n        \"Collaborated with cross-functional teams (consulting, architecture, sales, customer success)\",\n        \"Developed and implemented consistent SaaS project processes and procedures\",\n        \"Conducted regular project progress reviews with clients and management\",\n        \"Established robust talent pool focused on employee engagement\"\n      ],\n      technologies: [\"Agile\", \"Scrum\", \"SaaS\", \"Project Management\", \"Stakeholder Management\"],\n      responsibilities: [\n        \"SaaS Project Collaboration & Delivery\",\n        \"Process Development & Implementation\", \n        \"Project Monitoring, Reporting, & Stakeholder Management\",\n        \"Leadership & Talent Development\"\n      ],\n      domain: \"SaaS & Consulting\",\n      sortOrder: 1,\n      isVisible: true\n    },\n    {\n      company: \"Pragmatyc (Formerly Maximess)\",\n      position: \"Senior Consultant - Project Management Office\",\n      location: \"Nagpur\",\n      startDate: \"2021-09-01\",\n      endDate: \"2023-12-31\",\n      isCurrent: false,\n      description: \"Led PMO activities for IT projects across BFSI, SaaS, and tech domains with focus on Agile delivery and process improvements.\",\n      achievements: [\n        \"Awarded 'Super Squad 2021' for exceptional project delivery and teamwork\",\n        \"Improved project delivery time by 25% through process improvements\",\n        \"Successfully collaborated with teams (70-90 members)\",\n        \"Implemented process automation and introduced new tools\"\n      ],\n      technologies: [\"Jira\", \"Confluence\", \"Asana\", \"Trello\", \"Microsoft Project\", \"Zoho Projects\", \"Figma\", \"Balsamiq\"],\n      responsibilities: [\n        \"Collaborated with CXOs, Account Managers, PMO Managers, Project Managers\",\n        \"Tracked project progress, identified risks and gaps\",\n        \"Delivered high-quality reports to senior management and clients\",\n        \"Implemented process automation and drove tool adoption\"\n      ],\n      domain: \"BFSI & SaaS\",\n      sortOrder: 2,\n      isVisible: true\n    },\n    {\n      company: \"SimpleCRM / SimpleWorks Solutions\",\n      position: \"Senior Business Analyst – Implementation SPOC\",\n      location: \"Nagpur\",\n      startDate: \"2020-12-01\",\n      endDate: \"2021-09-30\",\n      isCurrent: false,\n      description: \"Served as SPOC for PaaS project delivery with expertise in Agile methodology and customer engagement.\",\n      achievements: [\n        \"Contributed to multiple PaaS project demos and implementations\",\n        \"Established comprehensive documentation framework\",\n        \"Facilitated user adoption through engaging videos and virtual events\",\n        \"Refined Agile techniques for efficient delivery cycles\"\n      ],\n      technologies: [\"PaaS\", \"CRM\", \"Agile\", \"Scrum\", \"Documentation Tools\"],\n      responsibilities: [\n        \"PaaS project demos, implementations, and post-go-live support\",\n        \"Agile methodology implementation and team guidance\",\n        \"Customer engagement and requirements gathering\",\n        \"Proposal and solution development\"\n      ],\n      domain: \"PaaS & CRM\",\n      sortOrder: 3,\n      isVisible: true\n    },\n    {\n      company: \"Maximess (Now Pragmatyc)\",\n      position: \"Associate Business Analyst / Associate Project Management Office\",\n      location: \"Nagpur\",\n      startDate: \"2018-08-01\",\n      endDate: \"2020-12-31\",\n      isCurrent: false,\n      description: \"Delivered SaaS and banking projects using Agile Scrum framework with focus on documentation and team leadership.\",\n      achievements: [\n        \"Received 'Emerging Face of the year 2020' Award for outstanding SaaS project delivery\",\n        \"Successfully delivered wireframes, prototypes, and process documentation\",\n        \"Led AI/ML internship program for engineering colleges\",\n        \"Coordinated formal and cultural events\"\n      ],\n      technologies: [\"Jira\", \"Confluence\", \"Zoho Projects\", \"Agile\", \"Scrum\", \"Wireframing\"],\n      responsibilities: [\n        \"Banking project management using Agile Scrum\",\n        \"Sprint/Product Backlog management in Jira\",\n        \"Documentation creation and maintenance\",\n        \"AI/ML internship program leadership\"\n      ],\n      domain: \"Banking & SaaS\",\n      sortOrder: 4,\n      isVisible: true\n    },\n    {\n      company: \"Walbro Software Pvt. Ltd.\",\n      position: \"Business Analyst\",\n      location: \"Nagpur\",\n      startDate: \"2017-10-01\",\n      endDate: \"2018-03-31\",\n      isCurrent: false,\n      description: \"Assisted in development of cloud-based task management tool and e-commerce platform with focus on content creation and prototyping.\",\n      achievements: [\n        \"Developed PlanMyWork - Cloud-Based Task Management Tool\",\n        \"Created DoodlyDeals - E-commerce Platform for Daily Deals\",\n        \"Content creation and prototyping\",\n        \"User documentation development\"\n      ],\n      technologies: [\"Cloud Technologies\", \"Task Management\", \"E-commerce\", \"Prototyping\"],\n      responsibilities: [\n        \"Cloud-based application development assistance\",\n        \"Content creation and prototyping\",\n        \"User documentation\",\n        \"E-commerce platform features\"\n      ],\n      domain: \"Cloud & E-commerce\",\n      sortOrder: 5,\n      isVisible: true\n    },\n    {\n      company: \"Principal Financial Group\",\n      position: \"Senior Process Associate / Training Specialist\",\n      location: \"Pune\",\n      startDate: \"2006-12-01\",\n      endDate: \"2015-12-31\",\n      isCurrent: false,\n      description: \"Managed client relationships, team administration, and special projects in financial services domain.\",\n      achievements: [\n        \"9 years of consistent performance in financial services\",\n        \"Client relationship management excellence\",\n        \"Team administration and training delivery\",\n        \"Special projects and initiatives leadership\"\n      ],\n      technologies: [\"Financial Systems\", \"Training Tools\", \"Process Management\"],\n      responsibilities: [\n        \"Client relationship management\",\n        \"Team administration\",\n        \"Training and development\",\n        \"Special projects and initiatives\"\n      ],\n      domain: \"Financial Services\",\n      sortOrder: 6,\n      isVisible: true\n    },\n    {\n      company: \"IBM Daksh Bharti Airtel\",\n      position: \"Floor Support / Customer Care Executive\",\n      location: \"Pune\",\n      startDate: \"2005-10-01\",\n      endDate: \"2006-11-30\",\n      isCurrent: false,\n      description: \"Provided floor support for new joiners and handled customer service escalations for Bharti Airtel.\",\n      achievements: [\n        \"Floor support for onboarding new joiners\",\n        \"Handled escalations effectively\",\n        \"Provided customer service plan details\",\n        \"Resolved queries on new plan offers\"\n      ],\n      technologies: [\"Customer Service Systems\", \"Telecom Platforms\"],\n      responsibilities: [\n        \"Floor support and onboarding\",\n        \"Escalation handling\",\n        \"Customer service delivery\",\n        \"Plan and offer consultation\"\n      ],\n      domain: \"Telecommunications\",\n      sortOrder: 7,\n      isVisible: true\n    }\n  ],\n\n  // Certifications from documents\n  certifications: [\n    {\n      name: \"Professional Scrum Master (PSM I)\",\n      provider: \"Scrum.org\",\n      issueDate: \"2024-09-01\",\n      description: \"Certified Professional Scrum Master demonstrating understanding of Scrum framework, accountability, and servant leadership.\",\n      skills: [\"Scrum\", \"Agile\", \"Team Leadership\", \"Servant Leadership\"],\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 1\n    },\n    {\n      name: \"DevOps Pro – From basics to advanced topics\",\n      provider: \"EdYoda for Business\",\n      issueDate: \"2024-08-01\",\n      description: \"Comprehensive DevOps training covering CI/CD, automation, and deployment practices.\",\n      skills: [\"DevOps\", \"CI/CD\", \"Automation\", \"Deployment\"],\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 2\n    },\n    {\n      name: \"Deluge on a Luge - Learn Zoho Programming\",\n      provider: \"Jeremy Nagel, Mario Cabrera on Udemy\",\n      issueDate: \"2024-08-01\",\n      description: \"Advanced Zoho programming and automation techniques.\",\n      skills: [\"Zoho\", \"Programming\", \"Automation\"],\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 3\n    },\n    {\n      name: \"Zoho Creator: Learn How to Build Applications step-by-step\",\n      provider: \"Zenith Business School on Udemy\",\n      issueDate: \"2024-08-01\",\n      description: \"Application development using Zoho Creator platform.\",\n      skills: [\"Zoho Creator\", \"Application Development\", \"Low-Code\"],\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 4\n    },\n    {\n      name: \"Project Management Professional Certification\",\n      provider: \"Institute of Management, Technology & Finance\",\n      issueDate: \"2023-08-01\",\n      description: \"Comprehensive project management certification covering PMBOK methodologies.\",\n      skills: [\"Project Management\", \"PMBOK\", \"Leadership\", \"Risk Management\"],\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 5\n    },\n    {\n      name: \"SWAYAM Certified New Product Development\",\n      provider: \"Indian Institute of Management Bangalore (IIM Bangalore)\",\n      issueDate: \"2023-07-01\",\n      description: \"New product development strategies and innovation management.\",\n      skills: [\"Product Development\", \"Innovation\", \"Strategy\"],\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 6\n    },\n    {\n      name: \"Project Management Skills for Leaders\",\n      provider: \"Project Management Institute\",\n      issueDate: \"2023-06-01\",\n      description: \"Leadership skills specific to project management contexts.\",\n      skills: [\"Leadership\", \"Project Management\", \"Team Management\"],\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 7\n    },\n    {\n      name: \"Advanced Lean Six Sigma Yellow Belt Certification\",\n      provider: \"Sparen and Gewinn Consulting\",\n      issueDate: \"2023-02-01\",\n      description: \"Process improvement methodology and quality management.\",\n      skills: [\"Lean Six Sigma\", \"Process Improvement\", \"Quality Management\"],\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 8\n    }\n  ],\n\n  // Skills from documents\n  skills: [\n    // Project Management & PMO\n    { name: \"Agile\", category: \"Project Management\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Scrum\", category: \"Project Management\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 2 },\n    { name: \"Kanban\", category: \"Project Management\", proficiencyLevel: 4, yearsOfExperience: 5, isVisible: true, isFeatured: true, sortOrder: 3 },\n    { name: \"PMO\", category: \"Project Management\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 4 },\n    { name: \"Lean Six Sigma\", category: \"Project Management\", proficiencyLevel: 3, yearsOfExperience: 2, isVisible: true, isFeatured: false, sortOrder: 5 },\n\n    // PM/PMO Tools\n    { name: \"Jira\", category: \"Tools\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Confluence\", category: \"Tools\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 2 },\n    { name: \"Zoho Projects\", category: \"Tools\", proficiencyLevel: 5, yearsOfExperience: 4, isVisible: true, isFeatured: true, sortOrder: 3 },\n    { name: \"Asana\", category: \"Tools\", proficiencyLevel: 4, yearsOfExperience: 3, isVisible: true, isFeatured: false, sortOrder: 4 },\n    { name: \"Trello\", category: \"Tools\", proficiencyLevel: 4, yearsOfExperience: 4, isVisible: true, isFeatured: false, sortOrder: 5 },\n    { name: \"Microsoft Project\", category: \"Tools\", proficiencyLevel: 4, yearsOfExperience: 3, isVisible: true, isFeatured: false, sortOrder: 6 },\n\n    // Communication & Collaboration\n    { name: \"Microsoft Teams\", category: \"Communication\", proficiencyLevel: 5, yearsOfExperience: 5, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Zoom\", category: \"Communication\", proficiencyLevel: 5, yearsOfExperience: 4, isVisible: true, isFeatured: true, sortOrder: 2 },\n    { name: \"Google Workspace\", category: \"Communication\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 3 },\n\n    // Microsoft Office\n    { name: \"Microsoft Excel\", category: \"Productivity\", proficiencyLevel: 5, yearsOfExperience: 15, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Microsoft Word\", category: \"Productivity\", proficiencyLevel: 5, yearsOfExperience: 15, isVisible: true, isFeatured: false, sortOrder: 2 },\n    { name: \"Microsoft PowerPoint\", category: \"Productivity\", proficiencyLevel: 5, yearsOfExperience: 15, isVisible: true, isFeatured: false, sortOrder: 3 },\n\n    // Design & Prototyping\n    { name: \"Figma\", category: \"Design\", proficiencyLevel: 4, yearsOfExperience: 3, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Balsamiq\", category: \"Design\", proficiencyLevel: 4, yearsOfExperience: 3, isVisible: true, isFeatured: false, sortOrder: 2 },\n    { name: \"Microsoft Visio\", category: \"Design\", proficiencyLevel: 4, yearsOfExperience: 4, isVisible: true, isFeatured: false, sortOrder: 3 },\n    { name: \"Lucidchart\", category: \"Design\", proficiencyLevel: 4, yearsOfExperience: 3, isVisible: true, isFeatured: false, sortOrder: 4 },\n\n    // Technical Skills\n    { name: \"DevOps Basics\", category: \"Technical\", proficiencyLevel: 3, yearsOfExperience: 1, isVisible: true, isFeatured: false, sortOrder: 1 },\n    { name: \"CI/CD\", category: \"Technical\", proficiencyLevel: 3, yearsOfExperience: 1, isVisible: true, isFeatured: false, sortOrder: 2 },\n    { name: \"SQL Basics\", category: \"Technical\", proficiencyLevel: 3, yearsOfExperience: 2, isVisible: true, isFeatured: false, sortOrder: 3 },\n\n    // Soft Skills\n    { name: \"Leadership\", category: \"Soft Skills\", proficiencyLevel: 5, yearsOfExperience: 8, isVisible: true, isFeatured: true, sortOrder: 1 },\n    { name: \"Team Management\", category: \"Soft Skills\", proficiencyLevel: 5, yearsOfExperience: 8, isVisible: true, isFeatured: true, sortOrder: 2 },\n    { name: \"Stakeholder Management\", category: \"Soft Skills\", proficiencyLevel: 5, yearsOfExperience: 6, isVisible: true, isFeatured: true, sortOrder: 3 },\n    { name: \"Problem Solving\", category: \"Soft Skills\", proficiencyLevel: 5, yearsOfExperience: 10, isVisible: true, isFeatured: true, sortOrder: 4 },\n    { name: \"Communication\", category: \"Soft Skills\", proficiencyLevel: 5, yearsOfExperience: 15, isVisible: true, isFeatured: true, sortOrder: 5 }\n  ],\n\n  // Major Projects from documents\n  projects: [\n    {\n      title: \"Banking & Treasury Platform\",\n      description: \"Comprehensive BFSI platform for bonds, securities, and auctions with compliance focus.\",\n      company: \"Maximess\",\n      client: \"Banking Client\",\n      domain: \"BFSI\",\n      technologies: [\"Agile\", \"Scrum\", \"Banking Systems\", \"Compliance\"],\n      methodology: \"Agile Scrum\",\n      teamSize: \"15-20 members\",\n      duration: \"4 months\",\n      role: \"Business Analyst / Scrum Master\",\n      achievements: [\n        \"Delivered compliance-focused platform on time\",\n        \"Managed sprint execution effectively\",\n        \"Created comprehensive BRDs and use cases\",\n        \"Facilitated successful UAT sessions\"\n      ],\n      challenges: [\n        \"Complex regulatory requirements\",\n        \"Multi-stakeholder coordination\",\n        \"Tight compliance deadlines\"\n      ],\n      outcomes: [\n        \"Successfully delivered within timeline\",\n        \"Received client appreciation\",\n        \"Zero compliance issues post-deployment\"\n      ],\n      startDate: \"2020-03-01\",\n      endDate: \"2020-07-31\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 1\n    },\n    {\n      title: \"PlanMyWork - Cloud Task Management\",\n      description: \"Cloud-based task management tool for project planning and team collaboration.\",\n      company: \"Walbro Software\",\n      domain: \"Productivity\",\n      technologies: [\"Cloud Computing\", \"Task Management\", \"Web Development\"],\n      methodology: \"Waterfall\",\n      teamSize: \"5-8 members\",\n      duration: \"6 months\",\n      role: \"Business Analyst\",\n      achievements: [\n        \"Designed user-friendly interface\",\n        \"Implemented cloud-based architecture\",\n        \"Created comprehensive user documentation\",\n        \"Delivered feature-rich task management solution\"\n      ],\n      challenges: [\n        \"Cloud integration complexity\",\n        \"User experience optimization\",\n        \"Performance requirements\"\n      ],\n      outcomes: [\n        \"Successful product launch\",\n        \"Positive user feedback\",\n        \"Scalable cloud solution\"\n      ],\n      startDate: \"2017-10-01\",\n      endDate: \"2018-03-31\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 2\n    },\n    {\n      title: \"DoodlyDeals - E-commerce Platform\",\n      description: \"E-commerce platform for daily deals with integrated payment systems.\",\n      company: \"Walbro Software\",\n      domain: \"E-commerce\",\n      technologies: [\"E-commerce\", \"Payment Integration\", \"Web Development\"],\n      methodology: \"Iterative\",\n      teamSize: \"6-10 members\",\n      duration: \"4 months\",\n      role: \"Business Analyst\",\n      achievements: [\n        \"Integrated multiple payment gateways\",\n        \"Designed deal management system\",\n        \"Implemented user engagement features\",\n        \"Created admin dashboard for deal management\"\n      ],\n      challenges: [\n        \"Payment gateway integration\",\n        \"Real-time deal management\",\n        \"User engagement optimization\"\n      ],\n      outcomes: [\n        \"Successful platform deployment\",\n        \"Integrated payment processing\",\n        \"User-friendly deal interface\"\n      ],\n      startDate: \"2017-11-01\",\n      endDate: \"2018-02-28\",\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 3\n    }\n  ],\n\n  // Achievements from documents\n  achievements: [\n    {\n      title: \"Open House Spotlight Q3-2022\",\n      description: \"Recognition for outstanding contributions to driving organizational excellence and process improvements, resulting in 15% increase in delivery efficiency.\",\n      organization: \"Pragmatyc\",\n      year: 2022,\n      category: \"Award\",\n      impact: \"Improved delivery efficiency by 15% through process enhancements\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 1\n    },\n    {\n      title: \"Super Squad 2021\",\n      description: \"Recognized for exceptional project delivery and teamwork, demonstrating strong change management and stakeholder engagement.\",\n      organization: \"Pragmatyc\",\n      year: 2021,\n      category: \"Award\",\n      impact: \"Led high-impact projects with exceptional team collaboration\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 2\n    },\n    {\n      title: \"Emerging Face of the Year 2020\",\n      description: \"Outstanding performance in SaaS project delivery, recognized for delivering projects within scope, budget, and timeline.\",\n      organization: \"Maximess\",\n      year: 2020,\n      category: \"Award\",\n      impact: \"Delivered high-quality SaaS projects consistently\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 3\n    },\n    {\n      title: \"25% Improvement in Project Delivery Time\",\n      description: \"Achieved significant improvement in project delivery time through process improvements and automation.\",\n      organization: \"Pragmatyc\",\n      year: 2022,\n      category: \"Achievement\",\n      impact: \"Enhanced organizational efficiency and client satisfaction\",\n      isVisible: true,\n      isFeatured: true,\n      sortOrder: 4\n    },\n    {\n      title: \"Team Leadership (70-90 members)\",\n      description: \"Successfully collaborated with and led large cross-functional teams, ensuring project delivery to industry standards.\",\n      organization: \"Multiple Organizations\",\n      year: 2023,\n      category: \"Leadership\",\n      impact: \"Demonstrated scalable leadership capabilities\",\n      isVisible: true,\n      isFeatured: false,\n      sortOrder: 5\n    }\n  ],\n\n  // Education from documents\n  education: [\n    {\n      institution: \"Yeshwantrao Chavan College of Engineering\",\n      degree: \"Bachelor of Engineering\",\n      field: \"Electrical Engineering\",\n      location: \"Nagpur, Maharashtra\",\n      startDate: \"2000-08-01\",\n      endDate: \"2005-05-31\",\n      description: \"Comprehensive engineering education with focus on electrical systems and technology.\",\n      achievements: [\n        \"Completed 4-year engineering program\",\n        \"Gained technical foundation for IT career transition\",\n        \"Developed analytical and problem-solving skills\"\n      ],\n      isVisible: true,\n      sortOrder: 1\n    }\n  ]\n};\n\nasync function seedProfessionalData() {\n  try {\n    console.log(\"Starting professional data seeding...\");\n\n    // Seed Employment Experience\n    console.log(\"Seeding employment experience...\");\n    for (const experience of professionalData.employmentExperience) {\n      await storage.createEmploymentExperience(experience);\n    }\n\n    // Seed Certifications\n    console.log(\"Seeding certifications...\");\n    for (const certification of professionalData.certifications) {\n      await storage.createCertification(certification);\n    }\n\n    // Seed Skills\n    console.log(\"Seeding skills...\");\n    for (const skill of professionalData.skills) {\n      await storage.createSkill(skill);\n    }\n\n    // Seed Projects\n    console.log(\"Seeding projects...\");\n    for (const project of professionalData.projects) {\n      await storage.createProject(project);\n    }\n\n    // Seed Achievements\n    console.log(\"Seeding achievements...\");\n    for (const achievement of professionalData.achievements) {\n      await storage.createAchievement(achievement);\n    }\n\n    // Seed Education\n    console.log(\"Seeding education...\");\n    for (const edu of professionalData.education) {\n      await storage.createEducation(edu);\n    }\n\n    console.log(\"Professional data seeding completed successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding professional data:\", error);\n  }\n}\n\n// Run the seeding function\nseedProfessionalData();","size_bytes":22830},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertPortfolioSectionSchema,\n  insertBlogPostSchema,\n  insertCommentSchema,\n  insertForumPostSchema,\n  insertForumReplySchema,\n  insertContestSchema,\n  insertFaqSchema,\n  insertContactMessageSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Portfolio routes\n  app.get('/api/portfolio/sections', async (req, res) => {\n    try {\n      const sections = await storage.getPortfolioSections();\n      res.json(sections);\n    } catch (error) {\n      console.error(\"Error fetching portfolio sections:\", error);\n      res.status(500).json({ message: \"Failed to fetch portfolio sections\" });\n    }\n  });\n\n  app.post('/api/portfolio/sections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertPortfolioSectionSchema.parse(req.body);\n      const section = await storage.createPortfolioSection(validatedData);\n      res.json(section);\n    } catch (error) {\n      console.error(\"Error creating portfolio section:\", error);\n      res.status(500).json({ message: \"Failed to create portfolio section\" });\n    }\n  });\n\n  app.put('/api/portfolio/sections/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const section = await storage.updatePortfolioSection(id, req.body);\n      res.json(section);\n    } catch (error) {\n      console.error(\"Error updating portfolio section:\", error);\n      res.status(500).json({ message: \"Failed to update portfolio section\" });\n    }\n  });\n\n  app.delete('/api/portfolio/sections/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      await storage.deletePortfolioSection(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting portfolio section:\", error);\n      res.status(500).json({ message: \"Failed to delete portfolio section\" });\n    }\n  });\n\n  app.patch('/api/portfolio/sections/:id/toggle-visibility', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const section = await storage.togglePortfolioSectionVisibility(id);\n      res.json(section);\n    } catch (error) {\n      console.error(\"Error toggling portfolio section visibility:\", error);\n      res.status(500).json({ message: \"Failed to toggle visibility\" });\n    }\n  });\n\n  // Blog routes\n  app.get('/api/blog/posts', async (req, res) => {\n    try {\n      const { published } = req.query;\n      const posts = await storage.getBlogPosts(published === 'true');\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching blog posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get('/api/blog/posts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const post = await storage.getBlogPost(id);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n\n      // Increment view count\n      await storage.incrementBlogPostViews(id);\n      \n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching blog post:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.get('/api/blog/posts/slug/:slug', async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPostBySlug(slug);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching blog post by slug:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.post('/api/blog/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertBlogPostSchema.parse({\n        ...req.body,\n        authorId: userId,\n      });\n      const post = await storage.createBlogPost(validatedData);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating blog post:\", error);\n      res.status(500).json({ message: \"Failed to create blog post\" });\n    }\n  });\n\n  app.put('/api/blog/posts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const post = await storage.updateBlogPost(id, req.body);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error updating blog post:\", error);\n      res.status(500).json({ message: \"Failed to update blog post\" });\n    }\n  });\n\n  app.delete('/api/blog/posts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteBlogPost(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting blog post:\", error);\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  app.post('/api/blog/posts/:id/like', async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.likeBlogPost(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error liking blog post:\", error);\n      res.status(500).json({ message: \"Failed to like blog post\" });\n    }\n  });\n\n  // Comment routes\n  app.get('/api/blog/posts/:postId/comments', async (req, res) => {\n    try {\n      const { postId } = req.params;\n      const comments = await storage.getComments(postId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post('/api/blog/posts/:postId/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postId } = req.params;\n      \n      const validatedData = insertCommentSchema.parse({\n        ...req.body,\n        postId,\n        authorId: userId,\n      });\n      \n      const comment = await storage.createComment(validatedData);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  app.post('/api/comments/:id/like', async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.likeComment(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error liking comment:\", error);\n      res.status(500).json({ message: \"Failed to like comment\" });\n    }\n  });\n\n  // Forum routes\n  app.get('/api/forum/posts', async (req, res) => {\n    try {\n      const posts = await storage.getForumPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching forum posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch forum posts\" });\n    }\n  });\n\n  app.get('/api/forum/posts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const post = await storage.getForumPost(id);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Forum post not found\" });\n      }\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching forum post:\", error);\n      res.status(500).json({ message: \"Failed to fetch forum post\" });\n    }\n  });\n\n  app.post('/api/forum/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const validatedData = insertForumPostSchema.parse({\n        ...req.body,\n        authorId: userId,\n      });\n      \n      const post = await storage.createForumPost(validatedData);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating forum post:\", error);\n      res.status(500).json({ message: \"Failed to create forum post\" });\n    }\n  });\n\n  app.get('/api/forum/posts/:postId/replies', async (req, res) => {\n    try {\n      const { postId } = req.params;\n      const replies = await storage.getForumReplies(postId);\n      res.json(replies);\n    } catch (error) {\n      console.error(\"Error fetching forum replies:\", error);\n      res.status(500).json({ message: \"Failed to fetch forum replies\" });\n    }\n  });\n\n  app.post('/api/forum/posts/:postId/replies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postId } = req.params;\n      \n      const validatedData = insertForumReplySchema.parse({\n        ...req.body,\n        postId,\n        authorId: userId,\n      });\n      \n      const reply = await storage.createForumReply(validatedData);\n      res.json(reply);\n    } catch (error) {\n      console.error(\"Error creating forum reply:\", error);\n      res.status(500).json({ message: \"Failed to create forum reply\" });\n    }\n  });\n\n  // Contest routes\n  app.get('/api/contests', async (req, res) => {\n    try {\n      const contests = await storage.getContests();\n      res.json(contests);\n    } catch (error) {\n      console.error(\"Error fetching contests:\", error);\n      res.status(500).json({ message: \"Failed to fetch contests\" });\n    }\n  });\n\n  app.post('/api/contests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertContestSchema.parse(req.body);\n      const contest = await storage.createContest(validatedData);\n      res.json(contest);\n    } catch (error) {\n      console.error(\"Error creating contest:\", error);\n      res.status(500).json({ message: \"Failed to create contest\" });\n    }\n  });\n\n  // FAQ routes\n  app.get('/api/faqs', async (req, res) => {\n    try {\n      const faqs = await storage.getFaqs();\n      res.json(faqs);\n    } catch (error) {\n      console.error(\"Error fetching FAQs:\", error);\n      res.status(500).json({ message: \"Failed to fetch FAQs\" });\n    }\n  });\n\n  app.post('/api/faqs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertFaqSchema.parse(req.body);\n      const faq = await storage.createFaq(validatedData);\n      res.json(faq);\n    } catch (error) {\n      console.error(\"Error creating FAQ:\", error);\n      res.status(500).json({ message: \"Failed to create FAQ\" });\n    }\n  });\n\n  // Contact routes\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      \n      // Send email notification using SendGrid\n      try {\n        const { sendEmail, createContactFormNotificationEmail } = await import('./sendgrid');\n        const emailTemplate = createContactFormNotificationEmail({\n          name: validatedData.name,\n          email: validatedData.email,\n          subject: validatedData.subject || null,\n          message: validatedData.message,\n          submittedAt: new Date().toLocaleString()\n        });\n        \n        await sendEmail({\n          to: 'support@ruvab.it.com',\n          from: 'noreply@ruvab.it.com',\n          subject: emailTemplate.subject,\n          html: emailTemplate.html,\n          text: emailTemplate.text\n        });\n      } catch (emailError) {\n        console.error(\"Error sending notification email:\", emailError);\n        // Don't fail the contact form submission if email fails\n      }\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating contact message:\", error);\n      res.status(500).json({ message: \"Failed to send contact message\" });\n    }\n  });\n\n  app.get('/api/contact/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching contact messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact messages\" });\n    }\n  });\n\n  // Professional Data Routes\n  \n  // Employment Experience routes\n  app.get('/api/employment-experience', async (req, res) => {\n    try {\n      const experience = await storage.getEmploymentExperience();\n      res.json(experience);\n    } catch (error) {\n      console.error('Error fetching employment experience:', error);\n      res.status(500).json({ error: 'Failed to fetch employment experience' });\n    }\n  });\n\n  app.post('/api/employment-experience', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const experience = await storage.createEmploymentExperience(req.body);\n      res.json(experience);\n    } catch (error) {\n      console.error('Error creating employment experience:', error);\n      res.status(500).json({ error: 'Failed to create employment experience' });\n    }\n  });\n\n  // Projects routes\n  app.get('/api/projects', async (req, res) => {\n    try {\n      const projects = req.query.featured === 'true' \n        ? await storage.getFeaturedProjects()\n        : await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      res.status(500).json({ error: 'Failed to fetch projects' });\n    }\n  });\n\n  // Certifications routes\n  app.get('/api/certifications', async (req, res) => {\n    try {\n      const certifications = req.query.featured === 'true'\n        ? await storage.getFeaturedCertifications()\n        : await storage.getCertifications();\n      res.json(certifications);\n    } catch (error) {\n      console.error('Error fetching certifications:', error);\n      res.status(500).json({ error: 'Failed to fetch certifications' });\n    }\n  });\n\n  // Skills routes\n  app.get('/api/skills', async (req, res) => {\n    try {\n      const skills = req.query.featured === 'true'\n        ? await storage.getFeaturedSkills()\n        : req.query.byCategory === 'true'\n        ? await storage.getSkillsByCategory()\n        : await storage.getSkills();\n      res.json(skills);\n    } catch (error) {\n      console.error('Error fetching skills:', error);\n      res.status(500).json({ error: 'Failed to fetch skills' });\n    }\n  });\n\n  // Achievements routes\n  app.get('/api/achievements', async (req, res) => {\n    try {\n      const achievements = req.query.featured === 'true'\n        ? await storage.getFeaturedAchievements()\n        : await storage.getAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error('Error fetching achievements:', error);\n      res.status(500).json({ error: 'Failed to fetch achievements' });\n    }\n  });\n\n  // Education routes\n  app.get('/api/education', async (req, res) => {\n    try {\n      const education = await storage.getEducation();\n      res.json(education);\n    } catch (error) {\n      console.error('Error fetching education:', error);\n      res.status(500).json({ error: 'Failed to fetch education' });\n    }\n  });\n\n  // Social Links routes\n  app.get('/api/social-links', async (req, res) => {\n    try {\n      const socialLinks = req.query.featured === 'true'\n        ? await storage.getFeaturedSocialLinks()\n        : req.query.byCategory === 'true'\n        ? await storage.getSocialLinksByCategory()\n        : await storage.getSocialLinks();\n      res.json(socialLinks);\n    } catch (error) {\n      console.error('Error fetching social links:', error);\n      res.status(500).json({ error: 'Failed to fetch social links' });\n    }\n  });\n\n  app.post('/api/social-links', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const socialLink = await storage.createSocialLink(req.body);\n      res.json(socialLink);\n    } catch (error) {\n      console.error('Error creating social link:', error);\n      res.status(500).json({ error: 'Failed to create social link' });\n    }\n  });\n\n  app.put('/api/social-links/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const socialLink = await storage.updateSocialLink(id, req.body);\n      res.json(socialLink);\n    } catch (error) {\n      console.error('Error updating social link:', error);\n      res.status(500).json({ error: 'Failed to update social link' });\n    }\n  });\n\n  app.delete('/api/social-links/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteSocialLink(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting social link:', error);\n      res.status(500).json({ error: 'Failed to delete social link' });\n    }\n  });\n\n  // Weekly summary email endpoint\n  app.post('/api/contact/weekly-summary', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await sendWeeklySummaryEmail();\n      res.json({ success: true, message: \"Weekly summary email sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending weekly summary:\", error);\n      res.status(500).json({ message: \"Failed to send weekly summary\" });\n    }\n  });\n\n  // Function to send weekly summary email\n  async function sendWeeklySummaryEmail() {\n    try {\n      const { sendEmail, createWeeklySummaryEmail } = await import('./sendgrid');\n      \n      // Get contact submissions from the last 7 days\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      \n      const contactSubmissions = await storage.getContactMessagesInDateRange(weekAgo, new Date());\n      \n      const weekStartDate = weekAgo.toLocaleDateString();\n      const weekEndDate = new Date().toLocaleDateString();\n      \n      const emailTemplate = createWeeklySummaryEmail(\n        contactSubmissions,\n        weekStartDate,\n        weekEndDate\n      );\n      \n      await sendEmail({\n        to: 'support@ruvab.it.com',\n        from: 'noreply@ruvab.it.com',\n        subject: emailTemplate.subject,\n        html: emailTemplate.html,\n        text: emailTemplate.text\n      });\n      \n      console.log(`Weekly summary email sent successfully for period ${weekStartDate} to ${weekEndDate}`);\n    } catch (error) {\n      console.error(\"Error sending weekly summary email:\", error);\n      throw error;\n    }\n  }\n\n  // Initialize weekly email schedule (runs every Monday at 9 AM)\n  function initializeWeeklyEmailSchedule() {\n    const scheduleWeeklyEmail = () => {\n      const now = new Date();\n      const nextMonday = new Date();\n      nextMonday.setDate(now.getDate() + ((1 + 7 - now.getDay()) % 7 || 7));\n      nextMonday.setHours(9, 0, 0, 0); // 9 AM\n      \n      if (nextMonday <= now) {\n        nextMonday.setDate(nextMonday.getDate() + 7);\n      }\n      \n      const timeUntilNextMonday = nextMonday.getTime() - now.getTime();\n      \n      setTimeout(async () => {\n        try {\n          await sendWeeklySummaryEmail();\n        } catch (error) {\n          console.error(\"Scheduled weekly email failed:\", error);\n        }\n        // Schedule next week\n        scheduleWeeklyEmail();\n      }, timeUntilNextMonday);\n      \n      console.log(`Next weekly summary email scheduled for: ${nextMonday.toLocaleString()}`);\n    };\n    \n    scheduleWeeklyEmail();\n  }\n\n  // Start the weekly email schedule\n  initializeWeeklyEmailSchedule();\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22665},"server/storage.ts":{"content":"import {\n  users,\n  portfolioSections,\n  blogPosts,\n  comments,\n  forumPosts,\n  forumReplies,\n  contests,\n  faqs,\n  contactMessages,\n  employmentExperience,\n  projects,\n  certifications,\n  skills,\n  achievements,\n  education,\n  socialLinks,\n  type User,\n  type UpsertUser,\n  type PortfolioSection,\n  type InsertPortfolioSection,\n  type BlogPost,\n  type InsertBlogPost,\n  type Comment,\n  type InsertComment,\n  type ForumPost,\n  type InsertForumPost,\n  type ForumReply,\n  type InsertForumReply,\n  type Contest,\n  type InsertContest,\n  type Faq,\n  type InsertFaq,\n  type ContactMessage,\n  type InsertContactMessage,\n  type EmploymentExperience,\n  type InsertEmploymentExperience,\n  type Project,\n  type InsertProject,\n  type Certification,\n  type InsertCertification,\n  type Skill,\n  type InsertSkill,\n  type Achievement,\n  type InsertAchievement,\n  type Education,\n  type InsertEducation,\n  type SocialLink,\n  type InsertSocialLink,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createLocalUser(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    isEmailVerified: boolean;\n  }): Promise<User>;\n  updateUserLastLogin(id: string): Promise<void>;\n  savePasswordResetToken(id: string, token: string, expires: Date): Promise<void>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n  updateUserPassword(id: string, hashedPassword: string): Promise<void>;\n  \n  // Portfolio operations\n  getPortfolioSections(): Promise<PortfolioSection[]>;\n  getPortfolioSection(id: string): Promise<PortfolioSection | undefined>;\n  createPortfolioSection(section: InsertPortfolioSection): Promise<PortfolioSection>;\n  updatePortfolioSection(id: string, section: Partial<InsertPortfolioSection>): Promise<PortfolioSection>;\n  deletePortfolioSection(id: string): Promise<void>;\n  togglePortfolioSectionVisibility(id: string): Promise<PortfolioSection>;\n  \n  // Blog operations\n  getBlogPosts(published?: boolean): Promise<(BlogPost & { author: User })[]>;\n  getBlogPost(id: string): Promise<(BlogPost & { author: User }) | undefined>;\n  getBlogPostBySlug(slug: string): Promise<(BlogPost & { author: User }) | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost>;\n  deleteBlogPost(id: string): Promise<void>;\n  incrementBlogPostViews(id: string): Promise<void>;\n  likeBlogPost(id: string): Promise<void>;\n  \n  // Comment operations\n  getComments(postId: string): Promise<(Comment & { author: User })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  likeComment(id: string): Promise<void>;\n  \n  // Forum operations\n  getForumPosts(): Promise<(ForumPost & { author: User; replyCount: number })[]>;\n  getForumPost(id: string): Promise<(ForumPost & { author: User }) | undefined>;\n  createForumPost(post: InsertForumPost): Promise<ForumPost>;\n  getForumReplies(postId: string): Promise<(ForumReply & { author: User })[]>;\n  createForumReply(reply: InsertForumReply): Promise<ForumReply>;\n  \n  // Contest operations\n  getContests(): Promise<Contest[]>;\n  createContest(contest: InsertContest): Promise<Contest>;\n  updateContest(id: string, contest: Partial<InsertContest>): Promise<Contest>;\n  deleteContest(id: string): Promise<void>;\n  \n  // FAQ operations\n  getFaqs(): Promise<Faq[]>;\n  createFaq(faq: InsertFaq): Promise<Faq>;\n  updateFaq(id: string, faq: Partial<InsertFaq>): Promise<Faq>;\n  deleteFaq(id: string): Promise<void>;\n  \n  // Contact operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  getContactMessagesInDateRange(startDate: Date, endDate: Date): Promise<ContactMessage[]>;\n  markContactMessageAsRead(id: string): Promise<void>;\n\n  // Professional data operations\n  // Employment Experience\n  getEmploymentExperience(): Promise<EmploymentExperience[]>;\n  createEmploymentExperience(experience: InsertEmploymentExperience): Promise<EmploymentExperience>;\n  updateEmploymentExperience(id: string, experience: Partial<InsertEmploymentExperience>): Promise<EmploymentExperience>;\n  deleteEmploymentExperience(id: string): Promise<void>;\n\n  // Projects\n  getProjects(): Promise<Project[]>;\n  getFeaturedProjects(): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n\n  // Certifications\n  getCertifications(): Promise<Certification[]>;\n  getFeaturedCertifications(): Promise<Certification[]>;\n  createCertification(certification: InsertCertification): Promise<Certification>;\n  updateCertification(id: string, certification: Partial<InsertCertification>): Promise<Certification>;\n  deleteCertification(id: string): Promise<void>;\n\n  // Skills\n  getSkills(): Promise<Skill[]>;\n  getSkillsByCategory(): Promise<Record<string, Skill[]>>;\n  getFeaturedSkills(): Promise<Skill[]>;\n  createSkill(skill: InsertSkill): Promise<Skill>;\n  updateSkill(id: string, skill: Partial<InsertSkill>): Promise<Skill>;\n  deleteSkill(id: string): Promise<void>;\n\n  // Achievements\n  getAchievements(): Promise<Achievement[]>;\n  getFeaturedAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  updateAchievement(id: string, achievement: Partial<InsertAchievement>): Promise<Achievement>;\n  deleteAchievement(id: string): Promise<void>;\n\n  // Education\n  getEducation(): Promise<Education[]>;\n  createEducation(education: InsertEducation): Promise<Education>;\n  updateEducation(id: string, education: Partial<InsertEducation>): Promise<Education>;\n  deleteEducation(id: string): Promise<void>;\n\n  // Social Links\n  getSocialLinks(): Promise<SocialLink[]>;\n  getSocialLinksByCategory(): Promise<Record<string, SocialLink[]>>;\n  getFeaturedSocialLinks(): Promise<SocialLink[]>;\n  createSocialLink(socialLink: InsertSocialLink): Promise<SocialLink>;\n  updateSocialLink(id: string, socialLink: Partial<InsertSocialLink>): Promise<SocialLink>;\n  deleteSocialLink(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Portfolio operations\n  async getPortfolioSections(): Promise<PortfolioSection[]> {\n    return await db.select().from(portfolioSections).orderBy(portfolioSections.sortOrder);\n  }\n\n  async getPortfolioSection(id: string): Promise<PortfolioSection | undefined> {\n    const [section] = await db.select().from(portfolioSections).where(eq(portfolioSections.id, id));\n    return section;\n  }\n\n  async createPortfolioSection(section: InsertPortfolioSection): Promise<PortfolioSection> {\n    const [newSection] = await db.insert(portfolioSections).values(section).returning();\n    return newSection;\n  }\n\n  async updatePortfolioSection(id: string, section: Partial<InsertPortfolioSection>): Promise<PortfolioSection> {\n    const [updatedSection] = await db\n      .update(portfolioSections)\n      .set({ ...section, updatedAt: new Date() })\n      .where(eq(portfolioSections.id, id))\n      .returning();\n    return updatedSection;\n  }\n\n  async deletePortfolioSection(id: string): Promise<void> {\n    await db.delete(portfolioSections).where(eq(portfolioSections.id, id));\n  }\n\n  async togglePortfolioSectionVisibility(id: string): Promise<PortfolioSection> {\n    const [section] = await db.select().from(portfolioSections).where(eq(portfolioSections.id, id));\n    const [updatedSection] = await db\n      .update(portfolioSections)\n      .set({ isVisible: !section.isVisible, updatedAt: new Date() })\n      .where(eq(portfolioSections.id, id))\n      .returning();\n    return updatedSection;\n  }\n\n  // Blog operations\n  async getBlogPosts(published?: boolean): Promise<(BlogPost & { author: User })[]> {\n    const query = db\n      .select({\n        ...blogPosts,\n        author: users,\n      })\n      .from(blogPosts)\n      .leftJoin(users, eq(blogPosts.authorId, users.id))\n      .orderBy(desc(blogPosts.createdAt));\n\n    if (published !== undefined) {\n      return await query.where(eq(blogPosts.isPublished, published));\n    }\n\n    return await query;\n  }\n\n  async getBlogPost(id: string): Promise<(BlogPost & { author: User }) | undefined> {\n    const [post] = await db\n      .select({\n        ...blogPosts,\n        author: users,\n      })\n      .from(blogPosts)\n      .leftJoin(users, eq(blogPosts.authorId, users.id))\n      .where(eq(blogPosts.id, id));\n    return post;\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<(BlogPost & { author: User }) | undefined> {\n    const [post] = await db\n      .select({\n        ...blogPosts,\n        author: users,\n      })\n      .from(blogPosts)\n      .leftJoin(users, eq(blogPosts.authorId, users.id))\n      .where(eq(blogPosts.slug, slug));\n    return post;\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const [newPost] = await db.insert(blogPosts).values(post).returning();\n    return newPost;\n  }\n\n  async updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost> {\n    const [updatedPost] = await db\n      .update(blogPosts)\n      .set({ ...post, updatedAt: new Date() })\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updatedPost;\n  }\n\n  async deleteBlogPost(id: string): Promise<void> {\n    await db.delete(blogPosts).where(eq(blogPosts.id, id));\n  }\n\n  async incrementBlogPostViews(id: string): Promise<void> {\n    await db\n      .update(blogPosts)\n      .set({ views: sql`${blogPosts.views} + 1` })\n      .where(eq(blogPosts.id, id));\n  }\n\n  async likeBlogPost(id: string): Promise<void> {\n    await db\n      .update(blogPosts)\n      .set({ likes: sql`${blogPosts.likes} + 1` })\n      .where(eq(blogPosts.id, id));\n  }\n\n  // Comment operations\n  async getComments(postId: string): Promise<(Comment & { author: User })[]> {\n    return await db\n      .select({\n        ...comments,\n        author: users,\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.authorId, users.id))\n      .where(eq(comments.postId, postId))\n      .orderBy(comments.createdAt);\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async likeComment(id: string): Promise<void> {\n    await db\n      .update(comments)\n      .set({ likes: sql`${comments.likes} + 1` })\n      .where(eq(comments.id, id));\n  }\n\n  // Forum operations\n  async getForumPosts(): Promise<(ForumPost & { author: User; replyCount: number })[]> {\n    return await db\n      .select({\n        ...forumPosts,\n        author: users,\n        replyCount: sql<number>`cast(count(${forumReplies.id}) as int)`,\n      })\n      .from(forumPosts)\n      .leftJoin(users, eq(forumPosts.authorId, users.id))\n      .leftJoin(forumReplies, eq(forumPosts.id, forumReplies.postId))\n      .groupBy(forumPosts.id, users.id)\n      .orderBy(desc(forumPosts.createdAt));\n  }\n\n  async getForumPost(id: string): Promise<(ForumPost & { author: User }) | undefined> {\n    const [post] = await db\n      .select({\n        ...forumPosts,\n        author: users,\n      })\n      .from(forumPosts)\n      .leftJoin(users, eq(forumPosts.authorId, users.id))\n      .where(eq(forumPosts.id, id));\n    return post;\n  }\n\n  async createForumPost(post: InsertForumPost): Promise<ForumPost> {\n    const [newPost] = await db.insert(forumPosts).values(post).returning();\n    return newPost;\n  }\n\n  async getForumReplies(postId: string): Promise<(ForumReply & { author: User })[]> {\n    return await db\n      .select({\n        ...forumReplies,\n        author: users,\n      })\n      .from(forumReplies)\n      .leftJoin(users, eq(forumReplies.authorId, users.id))\n      .where(eq(forumReplies.postId, postId))\n      .orderBy(forumReplies.createdAt);\n  }\n\n  async createForumReply(reply: InsertForumReply): Promise<ForumReply> {\n    const [newReply] = await db.insert(forumReplies).values(reply).returning();\n    return newReply;\n  }\n\n  // Contest operations\n  async getContests(): Promise<Contest[]> {\n    return await db.select().from(contests).orderBy(desc(contests.createdAt));\n  }\n\n  async createContest(contest: InsertContest): Promise<Contest> {\n    const [newContest] = await db.insert(contests).values(contest).returning();\n    return newContest;\n  }\n\n  async updateContest(id: string, contest: Partial<InsertContest>): Promise<Contest> {\n    const [updatedContest] = await db\n      .update(contests)\n      .set({ ...contest, updatedAt: new Date() })\n      .where(eq(contests.id, id))\n      .returning();\n    return updatedContest;\n  }\n\n  async deleteContest(id: string): Promise<void> {\n    await db.delete(contests).where(eq(contests.id, id));\n  }\n\n  // FAQ operations\n  async getFaqs(): Promise<Faq[]> {\n    return await db.select().from(faqs).where(eq(faqs.isVisible, true)).orderBy(faqs.sortOrder);\n  }\n\n  async createFaq(faq: InsertFaq): Promise<Faq> {\n    const [newFaq] = await db.insert(faqs).values(faq).returning();\n    return newFaq;\n  }\n\n  async updateFaq(id: string, faq: Partial<InsertFaq>): Promise<Faq> {\n    const [updatedFaq] = await db\n      .update(faqs)\n      .set({ ...faq, updatedAt: new Date() })\n      .where(eq(faqs.id, id))\n      .returning();\n    return updatedFaq;\n  }\n\n  async deleteFaq(id: string): Promise<void> {\n    await db.delete(faqs).where(eq(faqs.id, id));\n  }\n\n  // Contact operations\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [newMessage] = await db.insert(contactMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n\n  async getContactMessagesInDateRange(startDate: Date, endDate: Date): Promise<ContactMessage[]> {\n    return await db.select()\n      .from(contactMessages)\n      .where(and(\n        sql`${contactMessages.createdAt} >= ${startDate}`,\n        sql`${contactMessages.createdAt} <= ${endDate}`\n      ))\n      .orderBy(desc(contactMessages.createdAt));\n  }\n\n  async markContactMessageAsRead(id: string): Promise<void> {\n    await db\n      .update(contactMessages)\n      .set({ isRead: true })\n      .where(eq(contactMessages.id, id));\n  }\n\n  // Professional data implementations\n  // Employment Experience\n  async getEmploymentExperience(): Promise<EmploymentExperience[]> {\n    return await db\n      .select()\n      .from(employmentExperience)\n      .where(eq(employmentExperience.isVisible, true))\n      .orderBy(desc(employmentExperience.startDate), desc(employmentExperience.sortOrder));\n  }\n\n  async createEmploymentExperience(experience: InsertEmploymentExperience): Promise<EmploymentExperience> {\n    const [newExperience] = await db\n      .insert(employmentExperience)\n      .values(experience)\n      .returning();\n    return newExperience;\n  }\n\n  async updateEmploymentExperience(id: string, experience: Partial<InsertEmploymentExperience>): Promise<EmploymentExperience> {\n    const [updatedExperience] = await db\n      .update(employmentExperience)\n      .set({ ...experience, updatedAt: new Date() })\n      .where(eq(employmentExperience.id, id))\n      .returning();\n    return updatedExperience;\n  }\n\n  async deleteEmploymentExperience(id: string): Promise<void> {\n    await db.delete(employmentExperience).where(eq(employmentExperience.id, id));\n  }\n\n  // Projects\n  async getProjects(): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.isVisible, true))\n      .orderBy(desc(projects.startDate), desc(projects.sortOrder));\n  }\n\n  async getFeaturedProjects(): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(and(eq(projects.isVisible, true), eq(projects.isFeatured, true)))\n      .orderBy(desc(projects.startDate), desc(projects.sortOrder));\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db\n      .insert(projects)\n      .values(project)\n      .returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, project: Partial<InsertProject>): Promise<Project> {\n    const [updatedProject] = await db\n      .update(projects)\n      .set({ ...project, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Certifications\n  async getCertifications(): Promise<Certification[]> {\n    return await db\n      .select()\n      .from(certifications)\n      .where(eq(certifications.isVisible, true))\n      .orderBy(desc(certifications.issueDate), desc(certifications.sortOrder));\n  }\n\n  async getFeaturedCertifications(): Promise<Certification[]> {\n    return await db\n      .select()\n      .from(certifications)\n      .where(and(eq(certifications.isVisible, true), eq(certifications.isFeatured, true)))\n      .orderBy(desc(certifications.issueDate), desc(certifications.sortOrder));\n  }\n\n  async createCertification(certification: InsertCertification): Promise<Certification> {\n    const [newCertification] = await db\n      .insert(certifications)\n      .values(certification)\n      .returning();\n    return newCertification;\n  }\n\n  async updateCertification(id: string, certification: Partial<InsertCertification>): Promise<Certification> {\n    const [updatedCertification] = await db\n      .update(certifications)\n      .set({ ...certification, updatedAt: new Date() })\n      .where(eq(certifications.id, id))\n      .returning();\n    return updatedCertification;\n  }\n\n  async deleteCertification(id: string): Promise<void> {\n    await db.delete(certifications).where(eq(certifications.id, id));\n  }\n\n  // Skills\n  async getSkills(): Promise<Skill[]> {\n    return await db\n      .select()\n      .from(skills)\n      .where(eq(skills.isVisible, true))\n      .orderBy(desc(skills.proficiencyLevel), skills.sortOrder);\n  }\n\n  async getSkillsByCategory(): Promise<Record<string, Skill[]>> {\n    const allSkills = await this.getSkills();\n    return allSkills.reduce((acc, skill) => {\n      if (!acc[skill.category]) {\n        acc[skill.category] = [];\n      }\n      acc[skill.category].push(skill);\n      return acc;\n    }, {} as Record<string, Skill[]>);\n  }\n\n  async getFeaturedSkills(): Promise<Skill[]> {\n    return await db\n      .select()\n      .from(skills)\n      .where(and(eq(skills.isVisible, true), eq(skills.isFeatured, true)))\n      .orderBy(desc(skills.proficiencyLevel), skills.sortOrder);\n  }\n\n  async createSkill(skill: InsertSkill): Promise<Skill> {\n    const [newSkill] = await db\n      .insert(skills)\n      .values(skill)\n      .returning();\n    return newSkill;\n  }\n\n  async updateSkill(id: string, skill: Partial<InsertSkill>): Promise<Skill> {\n    const [updatedSkill] = await db\n      .update(skills)\n      .set({ ...skill, updatedAt: new Date() })\n      .where(eq(skills.id, id))\n      .returning();\n    return updatedSkill;\n  }\n\n  async deleteSkill(id: string): Promise<void> {\n    await db.delete(skills).where(eq(skills.id, id));\n  }\n\n  // Achievements\n  async getAchievements(): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.isVisible, true))\n      .orderBy(desc(achievements.year), achievements.sortOrder);\n  }\n\n  async getFeaturedAchievements(): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(and(eq(achievements.isVisible, true), eq(achievements.isFeatured, true)))\n      .orderBy(desc(achievements.year), achievements.sortOrder);\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [newAchievement] = await db\n      .insert(achievements)\n      .values(achievement)\n      .returning();\n    return newAchievement;\n  }\n\n  async updateAchievement(id: string, achievement: Partial<InsertAchievement>): Promise<Achievement> {\n    const [updatedAchievement] = await db\n      .update(achievements)\n      .set({ ...achievement, updatedAt: new Date() })\n      .where(eq(achievements.id, id))\n      .returning();\n    return updatedAchievement;\n  }\n\n  async deleteAchievement(id: string): Promise<void> {\n    await db.delete(achievements).where(eq(achievements.id, id));\n  }\n\n  // Education\n  async getEducation(): Promise<Education[]> {\n    return await db\n      .select()\n      .from(education)\n      .where(eq(education.isVisible, true))\n      .orderBy(desc(education.endDate), education.sortOrder);\n  }\n\n  async createEducation(educationData: InsertEducation): Promise<Education> {\n    const [newEducation] = await db\n      .insert(education)\n      .values(educationData)\n      .returning();\n    return newEducation;\n  }\n\n  async updateEducation(id: string, educationData: Partial<InsertEducation>): Promise<Education> {\n    const [updatedEducation] = await db\n      .update(education)\n      .set({ ...educationData, updatedAt: new Date() })\n      .where(eq(education.id, id))\n      .returning();\n    return updatedEducation;\n  }\n\n  async deleteEducation(id: string): Promise<void> {\n    await db.delete(education).where(eq(education.id, id));\n  }\n\n  // Social Links\n  async getSocialLinks(): Promise<SocialLink[]> {\n    return await db\n      .select()\n      .from(socialLinks)\n      .where(eq(socialLinks.isVisible, true))\n      .orderBy(socialLinks.category, socialLinks.sortOrder);\n  }\n\n  async getSocialLinksByCategory(): Promise<Record<string, SocialLink[]>> {\n    const allLinks = await this.getSocialLinks();\n    return allLinks.reduce((acc, link) => {\n      if (!acc[link.category]) {\n        acc[link.category] = [];\n      }\n      acc[link.category].push(link);\n      return acc;\n    }, {} as Record<string, SocialLink[]>);\n  }\n\n  async getFeaturedSocialLinks(): Promise<SocialLink[]> {\n    return await db\n      .select()\n      .from(socialLinks)\n      .where(and(eq(socialLinks.isVisible, true), eq(socialLinks.isFeatured, true)))\n      .orderBy(socialLinks.category, socialLinks.sortOrder);\n  }\n\n  async createSocialLink(socialLinkData: InsertSocialLink): Promise<SocialLink> {\n    const [newSocialLink] = await db\n      .insert(socialLinks)\n      .values(socialLinkData)\n      .returning();\n    return newSocialLink;\n  }\n\n  async updateSocialLink(id: string, socialLinkData: Partial<InsertSocialLink>): Promise<SocialLink> {\n    const [updatedSocialLink] = await db\n      .update(socialLinks)\n      .set({ ...socialLinkData, updatedAt: new Date() })\n      .where(eq(socialLinks.id, id))\n      .returning();\n    return updatedSocialLink;\n  }\n\n  async deleteSocialLink(id: string): Promise<void> {\n    await db.delete(socialLinks).where(eq(socialLinks.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":23531},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\"), // For local authentication\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  resetPasswordToken: varchar(\"reset_password_token\"),\n  resetPasswordExpires: timestamp(\"reset_password_expires\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User portfolios table\nexport const userPortfolios = pgTable(\"user_portfolios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  templateId: varchar(\"template_id\").references(() => portfolioTemplates.id),\n  title: varchar(\"title\").notNull(),\n  slug: varchar(\"slug\").unique().notNull(),\n  description: text(\"description\"),\n  themeConfig: jsonb(\"theme_config\"), // Custom theme settings\n  isPublished: boolean(\"is_published\").default(false),\n  isPublic: boolean(\"is_public\").default(true),\n  customDomain: varchar(\"custom_domain\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Portfolio templates table\nexport const portfolioTemplates = pgTable(\"portfolio_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // 'creative', 'professional', 'minimal', etc.\n  previewImage: varchar(\"preview_image\"),\n  templateConfig: jsonb(\"template_config\"), // Template structure and default settings\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  usageCount: integer(\"usage_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User delete requests table\nexport const userDeleteRequests = pgTable(\"user_delete_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  portfolioId: varchar(\"portfolio_id\").references(() => userPortfolios.id),\n  requestType: varchar(\"request_type\").notNull(), // 'portfolio', 'account'\n  reason: text(\"reason\"),\n  status: varchar(\"status\").default(\"pending\"), // 'pending', 'approved', 'rejected'\n  adminNotes: text(\"admin_notes\"),\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n  processedBy: varchar(\"processed_by\").references(() => users.id),\n});\n\n// Portfolio sections table\nexport const portfolioSections = pgTable(\"portfolio_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\"),\n  type: varchar(\"type\").notNull(), // 'hero', 'about', 'experience', 'skills', etc.\n  isVisible: boolean(\"is_visible\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  metadata: jsonb(\"metadata\"), // For storing additional data like images, links, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Blog posts table\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  slug: varchar(\"slug\").unique().notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  featuredImage: varchar(\"featured_image\"),\n  category: varchar(\"category\"),\n  tags: text(\"tags\").array(),\n  isPublished: boolean(\"is_published\").default(false),\n  readTime: integer(\"read_time\"), // in minutes\n  likes: integer(\"likes\").default(0),\n  views: integer(\"views\").default(0),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comments table\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  postId: varchar(\"post_id\").references(() => blogPosts.id),\n  parentId: varchar(\"parent_id\").references(() => comments.id),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Forum posts table\nexport const forumPosts = pgTable(\"forum_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\"),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  isAnswered: boolean(\"is_answered\").default(false),\n  views: integer(\"views\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Forum replies table\nexport const forumReplies = pgTable(\"forum_replies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  postId: varchar(\"post_id\").references(() => forumPosts.id),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  isAccepted: boolean(\"is_accepted\").default(false),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contests table\nexport const contests = pgTable(\"contests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  rules: text(\"rules\"),\n  prize: varchar(\"prize\"),\n  deadline: timestamp(\"deadline\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// FAQs table\nexport const faqs = pgTable(\"faqs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: varchar(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: varchar(\"category\"),\n  isVisible: boolean(\"is_visible\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contact messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  subject: varchar(\"subject\"),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Employment experience table\nexport const employmentExperience = pgTable(\"employment_experience\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  company: varchar(\"company\").notNull(),\n  position: varchar(\"position\").notNull(),\n  location: varchar(\"location\"),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  isCurrent: boolean(\"is_current\").default(false),\n  description: text(\"description\"),\n  achievements: text(\"achievements\").array(),\n  technologies: text(\"technologies\").array(),\n  responsibilities: text(\"responsibilities\").array(),\n  domain: varchar(\"domain\"), // Banking, SaaS, etc.\n  sortOrder: integer(\"sort_order\").default(0),\n  isVisible: boolean(\"is_visible\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  company: varchar(\"company\"),\n  client: varchar(\"client\"),\n  domain: varchar(\"domain\"), // Banking, EduTech, etc.\n  technologies: text(\"technologies\").array(),\n  methodology: varchar(\"methodology\"), // Agile, Scrum, etc.\n  teamSize: varchar(\"team_size\"),\n  duration: varchar(\"duration\"),\n  role: varchar(\"role\"),\n  achievements: text(\"achievements\").array(),\n  challenges: text(\"challenges\").array(),\n  outcomes: text(\"outcomes\").array(),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  isVisible: boolean(\"is_visible\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Certifications table\nexport const certifications = pgTable(\"certifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  provider: varchar(\"provider\").notNull(),\n  credentialId: varchar(\"credential_id\"),\n  credentialUrl: varchar(\"credential_url\"),\n  issueDate: date(\"issue_date\"),\n  expiryDate: date(\"expiry_date\"),\n  description: text(\"description\"),\n  skills: text(\"skills\").array(),\n  badgeUrl: varchar(\"badge_url\"),\n  isVisible: boolean(\"is_visible\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Skills and technologies table\nexport const skills = pgTable(\"skills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  category: varchar(\"category\").notNull(), // Technical, Soft Skills, Tools, etc.\n  proficiencyLevel: integer(\"proficiency_level\").default(1), // 1-5 scale\n  yearsOfExperience: integer(\"years_of_experience\"),\n  description: text(\"description\"),\n  isVisible: boolean(\"is_visible\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Awards and achievements table\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  organization: varchar(\"organization\"),\n  year: integer(\"year\"),\n  category: varchar(\"category\"), // Award, Recognition, etc.\n  impact: text(\"impact\"),\n  isVisible: boolean(\"is_visible\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Education table\nexport const education = pgTable(\"education\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institution: varchar(\"institution\").notNull(),\n  degree: varchar(\"degree\").notNull(),\n  field: varchar(\"field\"),\n  location: varchar(\"location\"),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  grade: varchar(\"grade\"),\n  description: text(\"description\"),\n  achievements: text(\"achievements\").array(),\n  isVisible: boolean(\"is_visible\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Social links table\nexport const socialLinks = pgTable(\"social_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: varchar(\"platform\").notNull(), // LinkedIn, YouTube, Twitter, etc.\n  url: varchar(\"url\").notNull(),\n  username: varchar(\"username\"),\n  displayName: varchar(\"display_name\"),\n  category: varchar(\"category\").notNull(), // Professional, Social, Portfolio, Tools, etc.\n  description: text(\"description\"),\n  icon: varchar(\"icon\"), // Icon name for display\n  isVisible: boolean(\"is_visible\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  blogPosts: many(blogPosts),\n  comments: many(comments),\n  forumPosts: many(forumPosts),\n  forumReplies: many(forumReplies),\n}));\n\nexport const blogPostsRelations = relations(blogPosts, ({ one, many }) => ({\n  author: one(users, {\n    fields: [blogPosts.authorId],\n    references: [users.id],\n  }),\n  comments: many(comments),\n}));\n\nexport const commentsRelations = relations(comments, ({ one, many }) => ({\n  author: one(users, {\n    fields: [comments.authorId],\n    references: [users.id],\n  }),\n  post: one(blogPosts, {\n    fields: [comments.postId],\n    references: [blogPosts.id],\n  }),\n  parent: one(comments, {\n    fields: [comments.parentId],\n    references: [comments.id],\n  }),\n  replies: many(comments),\n}));\n\nexport const forumPostsRelations = relations(forumPosts, ({ one, many }) => ({\n  author: one(users, {\n    fields: [forumPosts.authorId],\n    references: [users.id],\n  }),\n  replies: many(forumReplies),\n}));\n\nexport const forumRepliesRelations = relations(forumReplies, ({ one }) => ({\n  post: one(forumPosts, {\n    fields: [forumReplies.postId],\n    references: [forumPosts.id],\n  }),\n  author: one(users, {\n    fields: [forumReplies.authorId],\n    references: [users.id],\n  }),\n}));\n\n// Professional data relations\nexport const projectsRelations = relations(projects, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const certificationsRelations = relations(certifications, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const skillsRelations = relations(skills, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const achievementsRelations = relations(achievements, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const educationRelations = relations(education, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const employmentExperienceRelations = relations(employmentExperience, ({ one }) => ({\n  // Add relations if needed\n}));\n\nexport const socialLinksRelations = relations(socialLinks, ({ one }) => ({\n  // Add relations if needed\n}));\n\n// New platform relations\nexport const usersPortfolioRelations = relations(users, ({ many }) => ({\n  portfolios: many(userPortfolios),\n  deleteRequests: many(userDeleteRequests),\n  processedRequests: many(userDeleteRequests, {\n    relationName: \"processedBy\"\n  })\n}));\n\nexport const userPortfoliosRelations = relations(userPortfolios, ({ one }) => ({\n  user: one(users, {\n    fields: [userPortfolios.userId],\n    references: [users.id],\n  }),\n  template: one(portfolioTemplates, {\n    fields: [userPortfolios.templateId],\n    references: [portfolioTemplates.id],\n  }),\n}));\n\nexport const portfolioTemplatesRelations = relations(portfolioTemplates, ({ many }) => ({\n  userPortfolios: many(userPortfolios),\n}));\n\nexport const userDeleteRequestsRelations = relations(userDeleteRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [userDeleteRequests.userId],\n    references: [users.id],\n  }),\n  portfolio: one(userPortfolios, {\n    fields: [userDeleteRequests.portfolioId],\n    references: [userPortfolios.id],\n  }),\n  processedByUser: one(users, {\n    fields: [userDeleteRequests.processedBy],\n    references: [users.id],\n    relationName: \"processedBy\"\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertPortfolioSectionSchema = createInsertSchema(portfolioSections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPortfolioSection = z.infer<typeof insertPortfolioSectionSchema>;\nexport type PortfolioSection = typeof portfolioSections.$inferSelect;\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likes: true,\n  views: true,\n});\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likes: true,\n});\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\n\nexport const insertForumPostSchema = createInsertSchema(forumPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n});\nexport type InsertForumPost = z.infer<typeof insertForumPostSchema>;\nexport type ForumPost = typeof forumPosts.$inferSelect;\n\nexport const insertForumReplySchema = createInsertSchema(forumReplies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likes: true,\n});\nexport type InsertForumReply = z.infer<typeof insertForumReplySchema>;\nexport type ForumReply = typeof forumReplies.$inferSelect;\n\nexport const insertContestSchema = createInsertSchema(contests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertContest = z.infer<typeof insertContestSchema>;\nexport type Contest = typeof contests.$inferSelect;\n\nexport const insertFaqSchema = createInsertSchema(faqs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertFaq = z.infer<typeof insertFaqSchema>;\nexport type Faq = typeof faqs.$inferSelect;\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n\n// Professional data schemas\nexport const insertEmploymentExperienceSchema = createInsertSchema(employmentExperience).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertEmploymentExperience = z.infer<typeof insertEmploymentExperienceSchema>;\nexport type EmploymentExperience = typeof employmentExperience.$inferSelect;\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport const insertCertificationSchema = createInsertSchema(certifications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertCertification = z.infer<typeof insertCertificationSchema>;\nexport type Certification = typeof certifications.$inferSelect;\n\nexport const insertSkillSchema = createInsertSchema(skills).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertSkill = z.infer<typeof insertSkillSchema>;\nexport type Skill = typeof skills.$inferSelect;\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\n\nexport const insertEducationSchema = createInsertSchema(education).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertEducation = z.infer<typeof insertEducationSchema>;\nexport type Education = typeof education.$inferSelect;\n\nexport const insertSocialLinkSchema = createInsertSchema(socialLinks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertSocialLink = z.infer<typeof insertSocialLinkSchema>;\nexport type SocialLink = typeof socialLinks.$inferSelect;\n\n// New platform schema types\nexport const insertUserPortfolioSchema = createInsertSchema(userPortfolios).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertUserPortfolio = z.infer<typeof insertUserPortfolioSchema>;\nexport type UserPortfolio = typeof userPortfolios.$inferSelect;\n\nexport const insertPortfolioTemplateSchema = createInsertSchema(portfolioTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  usageCount: true,\n});\nexport type InsertPortfolioTemplate = z.infer<typeof insertPortfolioTemplateSchema>;\nexport type PortfolioTemplate = typeof portfolioTemplates.$inferSelect;\n\nexport const insertUserDeleteRequestSchema = createInsertSchema(userDeleteRequests).omit({\n  id: true,\n  requestedAt: true,\n  processedAt: true,\n});\nexport type InsertUserDeleteRequest = z.infer<typeof insertUserDeleteRequestSchema>;\nexport type UserDeleteRequest = typeof userDeleteRequests.$inferSelect;\n\n// Authentication schemas\nexport const userSignUpSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\nexport type UserSignUp = z.infer<typeof userSignUpSchema>;\n\nexport const userSignInSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\nexport type UserSignIn = z.infer<typeof userSignInSchema>;\n\nexport const resetPasswordSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\nexport type ResetPassword = z.infer<typeof resetPasswordSchema>;\n\nexport const newPasswordSchema = z.object({\n  token: z.string().min(1, \"Reset token is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\nexport type NewPassword = z.infer<typeof newPasswordSchema>;\n","size_bytes":22123},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Landing from \"@/pages/landing\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1057},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Source+Sans+Pro:wght@300;400;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 15%, 12%);\n  --foreground: hsl(220, 9%, 98%);\n  --card: hsl(220, 11%, 15%);\n  --card-foreground: hsl(220, 9%, 98%);\n  --popover: hsl(220, 11%, 15%);\n  --popover-foreground: hsl(220, 9%, 98%);\n  --primary: hsl(220, 13%, 20%);\n  --primary-foreground: hsl(220, 9%, 98%);\n  --secondary: hsl(215, 25%, 30%);\n  --secondary-foreground: hsl(220, 9%, 98%);\n  --muted: hsl(220, 9%, 18%);\n  --muted-foreground: hsl(220, 6%, 75%);\n  --accent: hsl(35, 100%, 55%);\n  --accent-foreground: hsl(220, 13%, 8%);\n  --destructive: hsl(0, 75%, 60%);\n  --destructive-foreground: hsl(220, 9%, 98%);\n  --border: hsl(220, 9%, 22%);\n  --input: hsl(220, 9%, 18%);\n  --ring: hsl(35, 100%, 55%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 12%, 22%);\n  --sidebar-primary: hsl(210, 29%, 24%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 29%, 24%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(210, 29%, 24%);\n  --success: hsl(145, 63%, 42%);\n  --gold: hsl(45, 100%, 51%);\n  --gold-light: hsl(48, 100%, 88%);\n  --gold-dark: hsl(42, 100%, 40%);\n  --achievement: hsl(280, 100%, 70%);\n  --achievement-light: hsl(280, 100%, 95%);\n  --professional: hsl(220, 26%, 14%);\n  --professional-light: hsl(220, 26%, 96%);\n  --gradient-gold: linear-gradient(135deg, hsl(45, 100%, 51%) 0%, hsl(42, 100%, 40%) 100%);\n  --gradient-professional: linear-gradient(135deg, hsl(220, 26%, 14%) 0%, hsl(210, 29%, 24%) 100%);\n  --gradient-achievement: linear-gradient(135deg, hsl(280, 100%, 70%) 0%, hsl(260, 100%, 55%) 100%);\n  --radius: 8px;\n  --font-playfair: 'Playfair Display', serif;\n  --font-inter: 'Inter', sans-serif;\n  --font-source: 'Source Sans Pro', sans-serif;\n}\n\n.dark {\n  --background: hsl(220, 13%, 8%);\n  --foreground: hsl(220, 9%, 96%);\n  --card: hsl(220, 11%, 11%);\n  --card-foreground: hsl(220, 9%, 96%);\n  --popover: hsl(220, 11%, 11%);\n  --popover-foreground: hsl(220, 9%, 96%);\n  --primary: hsl(220, 13%, 16%);\n  --primary-foreground: hsl(220, 9%, 96%);\n  --secondary: hsl(215, 25%, 25%);\n  --secondary-foreground: hsl(220, 9%, 96%);\n  --muted: hsl(220, 9%, 15%);\n  --muted-foreground: hsl(220, 6%, 68%);\n  --accent: hsl(35, 100%, 55%);\n  --accent-foreground: hsl(220, 13%, 8%);\n  --destructive: hsl(0, 75%, 60%);\n  --destructive-foreground: hsl(220, 9%, 96%);\n  --border: hsl(220, 9%, 18%);\n  --input: hsl(220, 9%, 15%);\n  --ring: hsl(35, 100%, 55%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(220, 11%, 11%);\n  --sidebar-foreground: hsl(220, 9%, 96%);\n  --sidebar-primary: hsl(220, 13%, 16%);\n  --sidebar-primary-foreground: hsl(220, 9%, 96%);\n  --sidebar-accent: hsl(220, 9%, 15%);\n  --sidebar-accent-foreground: hsl(220, 9%, 96%);\n  --sidebar-border: hsl(220, 9%, 18%);\n  --sidebar-ring: hsl(35, 100%, 55%);\n  --gold: hsl(45, 100%, 60%);\n  --gold-light: hsl(48, 100%, 88%);\n  --gold-dark: hsl(42, 100%, 40%);\n  --achievement: hsl(280, 100%, 70%);\n  --achievement-light: hsl(280, 100%, 95%);\n  --professional: hsl(220, 26%, 14%);\n  --professional-light: hsl(220, 26%, 96%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased;\n    font-family: var(--font-inter);\n    min-height: 100vh;\n    background: hsl(220, 15%, 12%) !important;\n    color: hsl(220, 9%, 98%) !important;\n    scroll-behavior: smooth;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-playfair);\n    font-weight: 700;\n    letter-spacing: -0.02em;\n    line-height: 1.1;\n    color: hsl(220, 9%, 98%) !important;\n  }\n  \n  h1 { font-size: clamp(2.5rem, 5vw, 4.5rem); }\n  h2 { font-size: clamp(2rem, 4vw, 3.5rem); }\n  h3 { font-size: clamp(1.5rem, 3vw, 2.5rem); }\n  \n  p {\n    font-family: var(--font-inter);\n    font-weight: 400;\n    line-height: 1.7;\n    letter-spacing: -0.005em;\n    color: hsl(220, 6%, 75%) !important;\n  }\n  \n  .text-large {\n    font-size: 1.25rem;\n    line-height: 1.8;\n    font-weight: 500;\n    color: hsl(220, 6%, 75%) !important;\n  }\n  \n  /* Force text visibility */\n  .text-foreground {\n    color: hsl(220, 9%, 98%) !important;\n  }\n  \n  .text-muted-foreground {\n    color: hsl(220, 6%, 75%) !important;\n  }\n  \n  .text-accent {\n    color: hsl(35, 100%, 55%) !important;\n  }\n  \n  /* Ensure all text is visible */\n  * {\n    color: inherit;\n  }\n  \n  span, div, a, button {\n    color: inherit;\n  }\n}\n\n@layer utilities {\n  .font-playfair {\n    font-family: var(--font-playfair);\n  }\n  \n  .font-inter {\n    font-family: var(--font-inter);\n  }\n  \n  .font-source {\n    font-family: var(--font-source);\n  }\n\n    .text-success {\n    color: hsl(var(--success));\n  }\n\n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n\n  .text-gold {\n    color: hsl(var(--gold));\n  }\n\n  .bg-gold {\n    background-color: hsl(var(--gold));\n  }\n\n  .text-achievement {\n    color: hsl(var(--achievement));\n  }\n\n  .bg-achievement {\n    background-color: hsl(var(--achievement));\n  }\n\n  .bg-gradient-gold {\n    background: var(--gradient-gold);\n  }\n\n  .bg-gradient-professional {\n    background: var(--gradient-professional);\n  }\n\n  .bg-gradient-achievement {\n    background: var(--gradient-achievement);\n  }\n\n  .achievement-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold;\n    background: var(--gradient-gold);\n    color: hsl(var(--professional));\n    box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);\n  }\n\n  .professional-card {\n    @apply bg-white dark:bg-gray-900 rounded-xl shadow-lg border;\n    background: linear-gradient(145deg, hsl(var(--card)) 0%, hsl(var(--professional-light)) 100%);\n    border: 1px solid hsl(var(--border));\n    transition: all 0.3s ease;\n  }\n\n  .professional-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  }\n\n  .achievement-highlight {\n    @apply relative;\n  }\n\n  .achievement-highlight::before {\n    content: '';\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n    background: var(--gradient-gold);\n    border-radius: inherit;\n    z-index: -1;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .achievement-highlight:hover::before {\n    opacity: 1;\n  }\n\n  .stats-card {\n    @apply bg-gradient-to-br from-background to-secondary/5 rounded-xl p-6 text-center;\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--gold-light)) 100%);\n    border: 2px solid transparent;\n    background-clip: padding-box;\n    position: relative;\n  }\n\n  .stats-card::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 2px;\n    background: var(--gradient-gold);\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: xor;\n    z-index: -1;\n  }\n\n  .premium-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--primary)) 0%, \n      hsl(var(--secondary)) 50%, \n      hsl(var(--gold)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  /* Modern utility classes */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(35, 100%, 60%) 0%, hsl(25, 100%, 50%) 50%, hsl(15, 100%, 45%) 100%);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n  \n  .card-modern {\n    background: linear-gradient(145deg, hsl(220, 11%, 11%) 0%, hsl(220, 9%, 13%) 100%);\n    border: 1px solid hsl(220, 9%, 18%);\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4), 0 1px 3px rgba(0, 0, 0, 0.2);\n    backdrop-filter: blur(8px);\n  }\n  \n  .card-elevated {\n    background: linear-gradient(145deg, hsl(220, 11%, 11%) 0%, hsl(220, 9%, 13%) 100%);\n    border: 1px solid hsl(220, 9%, 18%);\n    border-radius: 20px;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5), 0 2px 8px rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(12px);\n    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);\n  }\n  \n  .card-elevated:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 30px 60px rgba(0, 0, 0, 0.6), 0 4px 16px rgba(0, 0, 0, 0.4);\n    border-color: var(--accent);\n  }\n  \n  .section-padding {\n    padding: 6rem 0;\n  }\n  \n  @media (max-width: 768px) {\n    .section-padding {\n      padding: 4rem 0;\n    }\n  }\n  \n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: var(--background);\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: linear-gradient(180deg, var(--accent), hsl(25, 100%, 45%));\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(180deg, hsl(35, 100%, 50%), hsl(25, 100%, 40%));\n  }\n  \n  /* Smooth animations */\n  * {\n    transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, transform 0.2s ease;\n  }\n  \n  /* Modern loading animation */\n  @keyframes pulse-glow {\n    0%, 100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n    50% {\n      opacity: 0.8;\n      transform: scale(1.05);\n    }\n  }\n  \n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n}\n","size_bytes":10030},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport NavigationHeader from \"@/components/portfolio/navigation-header\";\nimport AdminDashboard from \"@/components/admin/admin-dashboard\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && !user?.isAdmin) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required for this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user?.isAdmin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <NavigationHeader />\n      <main>\n        <AdminDashboard />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1652},"client/src/pages/home.tsx":{"content":"import NavigationHeader from \"@/components/portfolio/navigation-header\";\nimport HeroSection from \"@/components/portfolio/hero-section\";\nimport AboutSection from \"@/components/portfolio/about-section\";\nimport ExperienceSection from \"@/components/portfolio/experience-section\";\nimport CertificationsSection from \"@/components/portfolio/certifications-section\";\nimport ProjectsSection from \"@/components/portfolio/projects-section\";\nimport SkillsSection from \"@/components/portfolio/skills-section\";\nimport SocialLinksSection from \"@/components/portfolio/social-links-section\";\nimport AffiliatePartnersSection from \"@/components/portfolio/affiliate-partners-section\";\nimport ProductHuntSection from \"@/components/portfolio/product-hunt-section\";\nimport YouTubeVideosSection from \"@/components/portfolio/youtube-videos-section\";\nimport TestimonialsSection from \"@/components/portfolio/testimonials-section\";\nimport BlogSection from \"@/components/blog/blog-section\";\nimport CommunitySection from \"@/components/community/community-section\";\nimport ContactSection from \"@/components/contact/contact-section\";\nimport Footer from \"@/components/portfolio/footer\";\nimport BlogPostModal from \"@/components/blog/blog-post-modal\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <NavigationHeader />\n      <main>\n        <HeroSection />\n        <AboutSection />\n        <ExperienceSection />\n        <CertificationsSection />\n        <ProjectsSection />\n        <SkillsSection />\n        <SocialLinksSection />\n        <AffiliatePartnersSection />\n        <ProductHuntSection />\n        <YouTubeVideosSection />\n        <TestimonialsSection />\n        <BlogSection />\n        <CommunitySection />\n        <ContactSection />\n      </main>\n      <Footer />\n      <BlogPostModal />\n    </div>\n  );\n}\n","size_bytes":1835},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-secondary\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] text-center\">\n          <Card className=\"w-full max-w-2xl\">\n            <CardContent className=\"pt-16 pb-16\">\n              <div className=\"mb-8\">\n                <h1 className=\"text-5xl lg:text-6xl font-playfair font-bold mb-6 text-primary\">\n                  Vaibhav Selukar\n                </h1>\n                <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n                  Professional Portfolio & Blog Platform\n                </p>\n                <p className=\"text-muted-foreground mb-8\">\n                  A visionary leader, bridging the gap between technology and business to create meaningful impact.\n                </p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"w-full\"\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"button-login\"\n                >\n                  Sign In to Continue\n                </Button>\n                \n                <p className=\"text-sm text-muted-foreground\">\n                  Access your portfolio dashboard and manage your professional content\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport PortfolioManagement from \"./portfolio-management\";\nimport BlogManagement from \"./blog-management\";\nimport type { BlogPost, User, ContactMessage } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { data: blogPosts = [] } = useQuery({\n    queryKey: ['/api/blog/posts'],\n    queryFn: async () => {\n      const response = await fetch('/api/blog/posts');\n      if (!response.ok) throw new Error('Failed to fetch blog posts');\n      return response.json() as Promise<(BlogPost & { author: User })[]>;\n    },\n  });\n\n  const { data: contactMessages = [] } = useQuery({\n    queryKey: ['/api/contact/messages'],\n    queryFn: async () => {\n      const response = await fetch('/api/contact/messages');\n      if (!response.ok) throw new Error('Failed to fetch contact messages');\n      return response.json() as Promise<ContactMessage[]>;\n    },\n  });\n\n  const stats = [\n    {\n      label: \"Portfolio Views\",\n      value: \"2,847\",\n      dataTestId: \"stat-portfolio-views\",\n    },\n    {\n      label: \"Blog Posts\",\n      value: blogPosts.length.toString(),\n      dataTestId: \"stat-blog-posts\",\n    },\n    {\n      label: \"Comments\",\n      value: \"156\",\n      dataTestId: \"stat-comments\",\n    },\n    {\n      label: \"Contact Messages\",\n      value: contactMessages.length.toString(),\n      dataTestId: \"stat-contact-messages\",\n    },\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-playfair font-bold text-primary mb-2\">Admin Dashboard</h2>\n        <p className=\"text-muted-foreground\">Manage your portfolio content and settings</p>\n      </div>\n\n      <Tabs defaultValue=\"portfolio\" className=\"space-y-8\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"portfolio\" data-testid=\"tab-portfolio\">Portfolio</TabsTrigger>\n          <TabsTrigger value=\"blog\" data-testid=\"tab-blog\">Blog Posts</TabsTrigger>\n          <TabsTrigger value=\"community\" data-testid=\"tab-community\">Community</TabsTrigger>\n          <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"portfolio\" className=\"space-y-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <PortfolioManagement />\n            </div>\n            <div>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-inter font-semibold mb-4\">Quick Stats</h3>\n                  <div className=\"space-y-4\">\n                    {stats.map((stat, index) => (\n                      <div key={index} className=\"flex justify-between\" data-testid={stat.dataTestId}>\n                        <span className=\"text-muted-foreground\">{stat.label}</span>\n                        <span className=\"font-medium text-stat-value\">{stat.value}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"blog\" className=\"space-y-8\">\n          <BlogManagement />\n        </TabsContent>\n\n        <TabsContent value=\"community\" className=\"space-y-8\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-xl font-inter font-semibold text-primary mb-4\">Community Management</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Community features including contests, FAQ management, and forum moderation will be available here.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Contest Management</h4>\n                  <p className=\"text-sm text-muted-foreground\">Create and manage contests</p>\n                </div>\n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">FAQ Management</h4>\n                  <p className=\"text-sm text-muted-foreground\">Add and edit frequently asked questions</p>\n                </div>\n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Forum Moderation</h4>\n                  <p className=\"text-sm text-muted-foreground\">Moderate forum posts and replies</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-8\">\n          <Card>\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-xl font-inter font-semibold text-primary mb-6\">Contact Messages</h3>\n              {contactMessages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No contact messages yet.\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {contactMessages.slice(0, 10).map((message) => (\n                    <div \n                      key={message.id} \n                      className={`border rounded-lg p-4 ${message.isRead ? 'bg-muted/50' : 'bg-card'}`}\n                      data-testid={`contact-message-${message.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h4 className=\"font-semibold text-message-name\">{message.name}</h4>\n                          <p className=\"text-sm text-muted-foreground text-message-email\">{message.email}</p>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(message.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {message.subject && (\n                        <p className=\"font-medium text-sm mb-2 text-message-subject\">{message.subject}</p>\n                      )}\n                      <p className=\"text-sm text-muted-foreground text-message-content\">\n                        {message.message}\n                      </p>\n                      {!message.isRead && (\n                        <div className=\"mt-2\">\n                          <span className=\"inline-block px-2 py-1 bg-accent text-accent-foreground text-xs rounded\">\n                            New\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":7048},"client/src/components/admin/blog-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBlogPostSchema, type InsertBlogPost, type BlogPost, type User } from \"@shared/schema\";\nimport { Plus, Edit, Eye, Trash2, Calendar, Clock } from \"lucide-react\";\n\nexport default function BlogManagement() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: blogPosts = [], isLoading } = useQuery({\n    queryKey: ['/api/blog/posts'],\n    queryFn: async () => {\n      const response = await fetch('/api/blog/posts');\n      if (!response.ok) throw new Error('Failed to fetch blog posts');\n      return response.json() as Promise<(BlogPost & { author: User })[]>;\n    },\n  });\n\n  const form = useForm<InsertBlogPost>({\n    resolver: zodResolver(insertBlogPostSchema),\n    defaultValues: {\n      title: \"\",\n      slug: \"\",\n      content: \"\",\n      excerpt: \"\",\n      featuredImage: \"\",\n      category: \"\",\n      tags: [],\n      isPublished: false,\n      readTime: 5,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBlogPost) => {\n      await apiRequest('POST', '/api/blog/posts', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Blog post created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBlogPost> }) => {\n      await apiRequest('PUT', `/api/blog/posts/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts'] });\n      setEditingPost(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Blog post updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/blog/posts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts'] });\n      toast({\n        title: \"Success\",\n        description: \"Blog post deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .replace(/[^a-z0-9 -]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  };\n\n  const onSubmit = (data: InsertBlogPost) => {\n    // Generate slug from title if not provided\n    if (!data.slug && data.title) {\n      data.slug = generateSlug(data.title);\n    }\n\n    // Parse tags if provided as comma-separated string\n    if (typeof data.tags === 'string') {\n      data.tags = (data.tags as any).split(',').map((tag: string) => tag.trim()).filter(Boolean);\n    }\n\n    if (editingPost) {\n      updateMutation.mutate({ id: editingPost.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (post: BlogPost) => {\n    setEditingPost(post);\n    form.reset({\n      title: post.title,\n      slug: post.slug,\n      content: post.content,\n      excerpt: post.excerpt || \"\",\n      featuredImage: post.featuredImage || \"\",\n      category: post.category || \"\",\n      tags: post.tags || [],\n      isPublished: post.isPublished,\n      readTime: post.readTime || 5,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this blog post?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"border border-border rounded-lg p-4\">\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-inter font-semibold\">Blog Posts</h3>\n          <Dialog open={isCreateDialogOpen || !!editingPost} onOpenChange={(open) => {\n            setIsCreateDialogOpen(open);\n            if (!open) {\n              setEditingPost(null);\n              form.reset();\n            }\n          }}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-add-post\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingPost ? \"Edit Blog Post\" : \"Create Blog Post\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-blog-post\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Title</Label>\n                    <Input\n                      id=\"title\"\n                      {...form.register(\"title\")}\n                      placeholder=\"Blog post title\"\n                      onChange={(e) => {\n                        form.setValue(\"title\", e.target.value);\n                        if (!editingPost) {\n                          form.setValue(\"slug\", generateSlug(e.target.value));\n                        }\n                      }}\n                      data-testid=\"input-post-title\"\n                    />\n                    {form.formState.errors.title && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.title.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"slug\">Slug</Label>\n                    <Input\n                      id=\"slug\"\n                      {...form.register(\"slug\")}\n                      placeholder=\"blog-post-slug\"\n                      data-testid=\"input-post-slug\"\n                    />\n                    {form.formState.errors.slug && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.slug.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"excerpt\">Excerpt</Label>\n                  <Textarea\n                    id=\"excerpt\"\n                    {...form.register(\"excerpt\")}\n                    placeholder=\"Brief description of the post\"\n                    rows={3}\n                    data-testid=\"textarea-post-excerpt\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Content</Label>\n                  <Textarea\n                    id=\"content\"\n                    {...form.register(\"content\")}\n                    placeholder=\"Write your blog post content here...\"\n                    rows={10}\n                    data-testid=\"textarea-post-content\"\n                  />\n                  {form.formState.errors.content && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.content.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"category\">Category</Label>\n                    <Input\n                      id=\"category\"\n                      {...form.register(\"category\")}\n                      placeholder=\"Technology, Leadership, etc.\"\n                      data-testid=\"input-post-category\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                    <Input\n                      id=\"tags\"\n                      {...form.register(\"tags\")}\n                      placeholder=\"ai, technology, innovation\"\n                      data-testid=\"input-post-tags\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"readTime\">Read Time (minutes)</Label>\n                    <Input\n                      id=\"readTime\"\n                      type=\"number\"\n                      {...form.register(\"readTime\", { valueAsNumber: true })}\n                      placeholder=\"5\"\n                      data-testid=\"input-read-time\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"featuredImage\">Featured Image URL</Label>\n                  <Input\n                    id=\"featuredImage\"\n                    {...form.register(\"featuredImage\")}\n                    placeholder=\"https://example.com/image.jpg\"\n                    data-testid=\"input-featured-image\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isPublished\"\n                    checked={form.watch(\"isPublished\")}\n                    onCheckedChange={(checked) => form.setValue(\"isPublished\", checked)}\n                    data-testid=\"switch-is-published\"\n                  />\n                  <Label htmlFor=\"isPublished\">Published</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreateDialogOpen(false);\n                      setEditingPost(null);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-save-post\"\n                  >\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"space-y-4\">\n          {blogPosts.map((post) => (\n            <div key={post.id} className=\"border border-border rounded-lg p-4\" data-testid={`blog-post-${post.id}`}>\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h4 className=\"font-medium text-post-title\">{post.title}</h4>\n                    <Badge variant={post.isPublished ? \"default\" : \"secondary\"}>\n                      {post.isPublished ? \"Published\" : \"Draft\"}\n                    </Badge>\n                    {post.category && (\n                      <Badge variant=\"outline\">{post.category}</Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                    <span className=\"flex items-center gap-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {new Date(post.createdAt).toLocaleDateString()}\n                    </span>\n                    {post.readTime && (\n                      <span className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {post.readTime} min read\n                      </span>\n                    )}\n                    <span>{post.views} views</span>\n                    <span>{post.likes} likes</span>\n                  </div>\n                  {post.excerpt && (\n                    <p className=\"text-sm text-muted-foreground text-post-excerpt\">\n                      {post.excerpt.length > 150 \n                        ? `${post.excerpt.substring(0, 150)}...` \n                        : post.excerpt\n                      }\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(post)}\n                    data-testid={`button-edit-${post.id}`}\n                  >\n                    <Edit className=\"h-4 w-4 text-secondary\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(`/blog/${post.slug}`, '_blank')}\n                    data-testid={`button-view-${post.id}`}\n                  >\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(post.id)}\n                    disabled={deleteMutation.isPending}\n                    data-testid={`button-delete-${post.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {blogPosts.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No blog posts created yet. Click \"Add Post\" to get started.\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16366},"client/src/components/admin/portfolio-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertPortfolioSectionSchema, type InsertPortfolioSection, type PortfolioSection } from \"@shared/schema\";\nimport { Plus, Edit, Eye, EyeOff, Trash2 } from \"lucide-react\";\n\nexport default function PortfolioManagement() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingSection, setEditingSection] = useState<PortfolioSection | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: portfolioSections = [], isLoading } = useQuery({\n    queryKey: ['/api/portfolio/sections'],\n    queryFn: async () => {\n      const response = await fetch('/api/portfolio/sections');\n      if (!response.ok) throw new Error('Failed to fetch portfolio sections');\n      return response.json() as Promise<PortfolioSection[]>;\n    },\n  });\n\n  const form = useForm<InsertPortfolioSection>({\n    resolver: zodResolver(insertPortfolioSectionSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      type: \"about\",\n      isVisible: true,\n      sortOrder: 0,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertPortfolioSection) => {\n      await apiRequest('POST', '/api/portfolio/sections', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio/sections'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Portfolio section created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create portfolio section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertPortfolioSection> }) => {\n      await apiRequest('PUT', `/api/portfolio/sections/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio/sections'] });\n      setEditingSection(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Portfolio section updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update portfolio section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleVisibilityMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('PATCH', `/api/portfolio/sections/${id}/toggle-visibility`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio/sections'] });\n      toast({\n        title: \"Success\",\n        description: \"Visibility updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update visibility\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/portfolio/sections/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio/sections'] });\n      toast({\n        title: \"Success\",\n        description: \"Portfolio section deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete portfolio section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPortfolioSection) => {\n    if (editingSection) {\n      updateMutation.mutate({ id: editingSection.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (section: PortfolioSection) => {\n    setEditingSection(section);\n    form.reset({\n      title: section.title,\n      content: section.content || \"\",\n      type: section.type,\n      isVisible: section.isVisible,\n      sortOrder: section.sortOrder,\n    });\n  };\n\n  const handleToggleVisibility = (id: string) => {\n    toggleVisibilityMutation.mutate(id);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this portfolio section?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"border border-border rounded-lg p-4\">\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-inter font-semibold\">Portfolio Sections</h3>\n          <Dialog open={isCreateDialogOpen || !!editingSection} onOpenChange={(open) => {\n            setIsCreateDialogOpen(open);\n            if (!open) {\n              setEditingSection(null);\n              form.reset();\n            }\n          }}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-add-section\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Section\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingSection ? \"Edit Portfolio Section\" : \"Create Portfolio Section\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-portfolio-section\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    {...form.register(\"title\")}\n                    placeholder=\"Section title\"\n                    data-testid=\"input-section-title\"\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select\n                    value={form.watch(\"type\")}\n                    onValueChange={(value) => form.setValue(\"type\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-section-type\">\n                      <SelectValue placeholder=\"Select section type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"hero\">Hero</SelectItem>\n                      <SelectItem value=\"about\">About</SelectItem>\n                      <SelectItem value=\"experience\">Experience</SelectItem>\n                      <SelectItem value=\"skills\">Skills</SelectItem>\n                      <SelectItem value=\"testimonials\">Testimonials</SelectItem>\n                      <SelectItem value=\"contact\">Contact</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Content</Label>\n                  <Textarea\n                    id=\"content\"\n                    {...form.register(\"content\")}\n                    placeholder=\"Section content\"\n                    rows={6}\n                    data-testid=\"textarea-section-content\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"sortOrder\">Sort Order</Label>\n                  <Input\n                    id=\"sortOrder\"\n                    type=\"number\"\n                    {...form.register(\"sortOrder\", { valueAsNumber: true })}\n                    placeholder=\"0\"\n                    data-testid=\"input-sort-order\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"isVisible\"\n                    {...form.register(\"isVisible\")}\n                    className=\"rounded border-border\"\n                    data-testid=\"checkbox-is-visible\"\n                  />\n                  <Label htmlFor=\"isVisible\">Visible</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreateDialogOpen(false);\n                      setEditingSection(null);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-save-section\"\n                  >\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"space-y-4\">\n          {portfolioSections.map((section) => (\n            <div key={section.id} className=\"border border-border rounded-lg p-4\" data-testid={`portfolio-section-${section.id}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-3 h-3 rounded-full ${section.isVisible ? 'bg-success' : 'bg-muted'}`}></div>\n                  <h4 className=\"font-medium text-section-title\">{section.title}</h4>\n                  <span className={`text-xs px-2 py-1 rounded ${\n                    section.isVisible ? 'bg-success/10 text-success' : 'bg-muted text-muted-foreground'\n                  }`}>\n                    {section.isVisible ? 'Visible' : 'Hidden'}\n                  </span>\n                  <span className=\"text-xs bg-secondary/10 text-secondary px-2 py-1 rounded\">\n                    {section.type}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(section)}\n                    data-testid={`button-edit-${section.id}`}\n                  >\n                    <Edit className=\"h-4 w-4 text-secondary\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleToggleVisibility(section.id)}\n                    disabled={toggleVisibilityMutation.isPending}\n                    data-testid={`button-toggle-visibility-${section.id}`}\n                  >\n                    {section.isVisible ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-success\" />\n                    )}\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(section.id)}\n                    disabled={deleteMutation.isPending}\n                    data-testid={`button-delete-${section.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              </div>\n              {section.content && (\n                <p className=\"text-sm text-muted-foreground text-section-content\">\n                  {section.content.length > 100 \n                    ? `${section.content.substring(0, 100)}...` \n                    : section.content\n                  }\n                </p>\n              )}\n            </div>\n          ))}\n\n          {portfolioSections.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No portfolio sections created yet. Click \"Add Section\" to get started.\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14685},"client/src/components/blog/blog-post-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { X, Heart, MessageCircle, Share2, Calendar, Clock, Smile, Paperclip } from \"lucide-react\";\nimport type { BlogPost, User, Comment } from \"@shared/schema\";\n\nexport default function BlogPostModal() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<string | null>(null);\n  const [commentText, setCommentText] = useState(\"\");\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const handleOpenModal = (event: CustomEvent) => {\n      setSelectedPostId(event.detail.postId);\n      setIsOpen(true);\n      document.body.style.overflow = 'hidden';\n    };\n\n    window.addEventListener('openBlogModal', handleOpenModal as EventListener);\n    return () => window.removeEventListener('openBlogModal', handleOpenModal as EventListener);\n  }, []);\n\n  const { data: post, isLoading: postLoading } = useQuery({\n    queryKey: ['/api/blog/posts', selectedPostId],\n    queryFn: async () => {\n      if (!selectedPostId) return null;\n      const response = await fetch(`/api/blog/posts/${selectedPostId}`);\n      if (!response.ok) throw new Error('Failed to fetch blog post');\n      return response.json() as Promise<BlogPost & { author: User }>;\n    },\n    enabled: !!selectedPostId,\n  });\n\n  const { data: comments = [], isLoading: commentsLoading } = useQuery({\n    queryKey: ['/api/blog/posts', selectedPostId, 'comments'],\n    queryFn: async () => {\n      if (!selectedPostId) return [];\n      const response = await fetch(`/api/blog/posts/${selectedPostId}/comments`);\n      if (!response.ok) throw new Error('Failed to fetch comments');\n      return response.json() as Promise<(Comment & { author: User })[]>;\n    },\n    enabled: !!selectedPostId,\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      await apiRequest('POST', `/api/blog/posts/${postId}/like`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts', selectedPostId] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to like post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const commentMutation = useMutation({\n    mutationFn: async ({ postId, content }: { postId: string; content: string }) => {\n      await apiRequest('POST', `/api/blog/posts/${postId}/comments`, { content });\n    },\n    onSuccess: () => {\n      setCommentText(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts', selectedPostId, 'comments'] });\n      toast({\n        title: \"Success\",\n        description: \"Comment posted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to post comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const closeModal = () => {\n    setIsOpen(false);\n    setSelectedPostId(null);\n    document.body.style.overflow = 'auto';\n  };\n\n  const handleLike = () => {\n    if (!selectedPostId) return;\n    likeMutation.mutate(selectedPostId);\n  };\n\n  const handleComment = () => {\n    if (!selectedPostId || !commentText.trim()) return;\n    commentMutation.mutate({ postId: selectedPostId, content: commentText.trim() });\n  };\n\n  const handleShare = () => {\n    if (!post) return;\n    if (navigator.share) {\n      navigator.share({\n        title: post.title,\n        url: `${window.location.origin}/blog/${post.slug}`,\n      });\n    } else {\n      navigator.clipboard.writeText(`${window.location.origin}/blog/${post.slug}`);\n      toast({\n        title: \"Copied\",\n        description: \"Link copied to clipboard\",\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50\" data-testid=\"blog-modal\">\n      <div className=\"min-h-full flex items-start justify-center p-4 pt-16\">\n        <div className=\"bg-card border border-border rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n          <div className=\"sticky top-0 bg-card border-b border-border p-6 flex items-center justify-between\">\n            <h2 className=\"text-2xl font-playfair font-bold text-primary\">\n              {post?.title || \"Loading...\"}\n            </h2>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={closeModal}\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n          \n          <div className=\"p-6\">\n            {postLoading ? (\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"h-4 bg-muted rounded\"></div>\n                <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n              </div>\n            ) : post ? (\n              <>\n                {/* Blog Content */}\n                <div className=\"prose prose-lg max-w-none mb-8\">\n                  <div className=\"flex items-center space-x-4 mb-6\">\n                    <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                      <Calendar className=\"h-4 w-4\" />\n                      {new Date(post.createdAt).toLocaleDateString()}\n                    </span>\n                    {post.category && (\n                      <Badge variant=\"secondary\">{post.category}</Badge>\n                    )}\n                    {post.readTime && (\n                      <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                        <Clock className=\"h-4 w-4\" />\n                        {post.readTime} min read\n                      </span>\n                    )}\n                  </div>\n                  {post.featuredImage && (\n                    <img \n                      src={post.featuredImage}\n                      alt={post.title}\n                      className=\"w-full h-64 object-cover rounded-xl mb-6\" \n                      data-testid=\"img-blog-featured\"\n                    />\n                  )}\n                  <div className=\"space-y-4 text-foreground\">\n                    <div dangerouslySetInnerHTML={{ __html: post.content }} />\n                  </div>\n                </div>\n\n                {/* Blog Interactions */}\n                <div className=\"border-t border-border pt-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center space-x-6\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={handleLike}\n                        disabled={likeMutation.isPending}\n                        className=\"flex items-center space-x-2 text-muted-foreground hover:text-accent transition-colors\"\n                        data-testid=\"button-like-post\"\n                      >\n                        <Heart className=\"h-4 w-4\" />\n                        <span>{post.likes}</span>\n                      </Button>\n                      <span className=\"flex items-center space-x-2 text-muted-foreground\">\n                        <MessageCircle className=\"h-4 w-4\" />\n                        <span>{comments.length}</span>\n                      </span>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={handleShare}\n                        className=\"flex items-center space-x-2 text-muted-foreground hover:text-primary transition-colors\"\n                        data-testid=\"button-share-post\"\n                      >\n                        <Share2 className=\"h-4 w-4\" />\n                        <span>Share</span>\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Comments Section */}\n                  <div className=\"space-y-6\">\n                    <h4 className=\"text-lg font-inter font-semibold text-primary\">Comments</h4>\n                    \n                    {/* Comment Form */}\n                    {isAuthenticated ? (\n                      <div className=\"bg-muted rounded-lg p-4\">\n                        <Textarea \n                          value={commentText}\n                          onChange={(e) => setCommentText(e.target.value)}\n                          className=\"resize-none\" \n                          rows={3} \n                          placeholder=\"Share your thoughts... Use @username to tag someone\"\n                          data-testid=\"textarea-comment\"\n                        />\n                        <div className=\"flex items-center justify-between mt-3\">\n                          <div className=\"flex items-center space-x-4\">\n                            <Button variant=\"ghost\" size=\"sm\" title=\"Add emoji\">\n                              <Smile className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" title=\"Attach file\">\n                              <Paperclip className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          <Button \n                            onClick={handleComment}\n                            disabled={!commentText.trim() || commentMutation.isPending}\n                            data-testid=\"button-post-comment\"\n                          >\n                            Comment\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"bg-muted rounded-lg p-4 text-center\">\n                        <p className=\"text-muted-foreground mb-4\">Please sign in to leave a comment</p>\n                        <Button onClick={() => window.location.href = '/api/login'}>\n                          Sign In\n                        </Button>\n                      </div>\n                    )}\n\n                    {/* Existing Comments */}\n                    {commentsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[...Array(2)].map((_, i) => (\n                          <div key={i} className=\"border border-border rounded-lg p-4 animate-pulse\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                              <div className=\"flex-1 space-y-2\">\n                                <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                                <div className=\"h-16 bg-muted rounded\"></div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {comments.map((comment) => (\n                          <div key={comment.id} className=\"border border-border rounded-lg p-4\" data-testid={`comment-${comment.id}`}>\n                            <div className=\"flex items-start space-x-3\">\n                              {comment.author?.profileImageUrl ? (\n                                <img \n                                  src={comment.author.profileImageUrl}\n                                  alt={`${comment.author.firstName || 'User'} avatar`}\n                                  className=\"w-10 h-10 rounded-full object-cover\" \n                                  data-testid={`img-comment-avatar-${comment.id}`}\n                                />\n                              ) : (\n                                <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-primary font-medium\">\n                                    {comment.author?.firstName?.[0] || comment.author?.email?.[0] || 'U'}\n                                  </span>\n                                </div>\n                              )}\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2 mb-2\">\n                                  <h5 className=\"font-medium text-foreground text-comment-author\">\n                                    {comment.author?.firstName && comment.author?.lastName \n                                      ? `${comment.author.firstName} ${comment.author.lastName}`\n                                      : comment.author?.email || 'Anonymous'}\n                                  </h5>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {new Date(comment.createdAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                                <p className=\"text-muted-foreground text-sm leading-relaxed text-comment-content\">\n                                  {comment.content}\n                                </p>\n                                <div className=\"flex items-center space-x-4 mt-3\">\n                                  <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                                    <Heart className=\"h-3 w-3\" />\n                                    {comment.likes}\n                                  </span>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-muted-foreground hover:text-secondary\">\n                                    Reply\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                        \n                        {comments.length === 0 && (\n                          <div className=\"text-center py-8 text-muted-foreground\">\n                            No comments yet. Be the first to share your thoughts!\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Post not found\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15701},"client/src/components/blog/blog-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, MessageCircle, Share2, Calendar, Clock } from \"lucide-react\";\nimport type { BlogPost, User } from \"@shared/schema\";\n\nexport default function BlogSection() {\n  const [selectedPost, setSelectedPost] = useState<string | null>(null);\n\n  const { data: blogPosts = [], isLoading } = useQuery({\n    queryKey: ['/api/blog/posts'],\n    queryFn: async () => {\n      const response = await fetch('/api/blog/posts?published=true');\n      if (!response.ok) throw new Error('Failed to fetch blog posts');\n      return response.json() as Promise<(BlogPost & { author: User })[]>;\n    },\n  });\n\n  const handlePostClick = (postId: string) => {\n    setSelectedPost(postId);\n    // Dispatch custom event to open modal\n    window.dispatchEvent(new CustomEvent('openBlogModal', { detail: { postId } }));\n  };\n\n  const handleShare = (e: React.MouseEvent, postId: string) => {\n    e.stopPropagation();\n    if (navigator.share) {\n      navigator.share({\n        title: 'Blog Post',\n        url: `${window.location.origin}/blog/${postId}`,\n      });\n    } else {\n      navigator.clipboard.writeText(`${window.location.origin}/blog/${postId}`);\n    }\n  };\n\n  const handleLike = async (e: React.MouseEvent, postId: string) => {\n    e.stopPropagation();\n    try {\n      await fetch(`/api/blog/posts/${postId}/like`, { method: 'POST' });\n    } catch (error) {\n      console.error('Failed to like post:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"blog\" className=\"py-20 bg-muted\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">Latest Blog Posts</h2>\n            <p className=\"text-xl text-muted-foreground\">Insights on technology, leadership, and innovation</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"h-48 bg-muted rounded-t-lg\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-6 bg-muted rounded mb-3\"></div>\n                  <div className=\"h-16 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"blog\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">Latest Blog Posts</h2>\n          <p className=\"text-xl text-muted-foreground\">Insights on technology, leadership, and innovation</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {blogPosts.slice(0, 3).map((post) => (\n            <article \n              key={post.id}\n              className=\"bg-card border border-border rounded-2xl overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\"\n              onClick={() => handlePostClick(post.id)}\n              data-testid={`blog-post-${post.slug}`}\n            >\n              {post.featuredImage && (\n                <img \n                  src={post.featuredImage}\n                  alt={post.title}\n                  className=\"w-full h-48 object-cover\" \n                  data-testid={`img-blog-${post.slug}`}\n                />\n              )}\n              <div className=\"p-6\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  {post.category && (\n                    <Badge variant=\"secondary\" data-testid={`badge-category-${post.slug}`}>\n                      {post.category}\n                    </Badge>\n                  )}\n                  {post.readTime && (\n                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                      <Clock className=\"h-3 w-3\" />\n                      {post.readTime} min read\n                    </span>\n                  )}\n                </div>\n                <h3 className=\"text-xl font-inter font-semibold text-foreground mb-3 line-clamp-2\" data-testid={`title-blog-${post.slug}`}>\n                  {post.title}\n                </h3>\n                {post.excerpt && (\n                  <p className=\"text-muted-foreground mb-4 line-clamp-3\" data-testid={`excerpt-blog-${post.slug}`}>\n                    {post.excerpt}\n                  </p>\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {new Date(post.createdAt).toLocaleDateString()}\n                    </span>\n                    <button \n                      className=\"flex items-center space-x-1 text-sm text-muted-foreground hover:text-accent transition-colors\"\n                      onClick={(e) => handleLike(e, post.id)}\n                      data-testid={`button-like-${post.slug}`}\n                    >\n                      <Heart className=\"h-4 w-4\" />\n                      <span>{post.likes}</span>\n                    </button>\n                    <span className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                      <MessageCircle className=\"h-4 w-4\" />\n                      <span>0</span>\n                    </span>\n                  </div>\n                  <button \n                    className=\"text-primary hover:text-primary/80 transition-colors\"\n                    onClick={(e) => handleShare(e, post.id)}\n                    data-testid={`button-share-${post.slug}`}\n                  >\n                    <Share2 className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </article>\n          ))}\n        </div>\n\n        {/* Blog Interaction Features */}\n        <Card className=\"p-8\">\n          <h3 className=\"text-2xl font-playfair font-bold text-primary mb-6\">Join the Conversation</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <MessageCircle className=\"text-primary h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">Comment & Discuss</h4>\n              <p className=\"text-sm text-muted-foreground\">Share your thoughts and engage with fellow readers</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-secondary/10 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <Share2 className=\"text-secondary h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">Share Articles</h4>\n              <p className=\"text-sm text-muted-foreground\">Spread knowledge across your professional network</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <span className=\"text-accent text-2xl font-bold\">@</span>\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">Tag Colleagues</h4>\n              <p className=\"text-sm text-muted-foreground\">Mention others to join specific discussions</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8014},"client/src/components/community/community-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Trophy, HelpCircle, Users, Calendar, MapPin } from \"lucide-react\";\nimport type { Contest, Faq, ForumPost, User } from \"@shared/schema\";\n\nexport default function CommunitySection() {\n  // Fetch contests\n  const { data: contests = [] } = useQuery({\n    queryKey: ['/api/contests'],\n    queryFn: async () => {\n      const response = await fetch('/api/contests');\n      if (!response.ok) throw new Error('Failed to fetch contests');\n      return response.json() as Promise<Contest[]>;\n    },\n  });\n\n  // Fetch FAQs\n  const { data: faqs = [] } = useQuery({\n    queryKey: ['/api/faqs'],\n    queryFn: async () => {\n      const response = await fetch('/api/faqs');\n      if (!response.ok) throw new Error('Failed to fetch FAQs');\n      return response.json() as Promise<Faq[]>;\n    },\n  });\n\n  // Fetch forum posts\n  const { data: forumPosts = [] } = useQuery({\n    queryKey: ['/api/forum/posts'],\n    queryFn: async () => {\n      const response = await fetch('/api/forum/posts');\n      if (!response.ok) throw new Error('Failed to fetch forum posts');\n      return response.json() as Promise<(ForumPost & { author: User; replyCount: number })[]>;\n    },\n  });\n\n  return (\n    <section id=\"community\" className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">Community Hub</h2>\n          <p className=\"text-xl text-muted-foreground\">Connect, learn, and grow together</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Contests Section */}\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Trophy className=\"text-accent h-6 w-6\" />\n                </div>\n                <h3 className=\"text-2xl font-playfair font-bold text-primary\">Contests</h3>\n              </div>\n              <div className=\"space-y-4 mb-6\">\n                {contests.slice(0, 2).map((contest) => (\n                  <div key={contest.id} className=\"border-l-4 border-accent pl-4\" data-testid={`contest-${contest.id}`}>\n                    <h4 className=\"font-semibold text-foreground text-contest-title\">{contest.title}</h4>\n                    {contest.deadline && (\n                      <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3\" />\n                        Ends {new Date(contest.deadline).toLocaleDateString()}\n                      </p>\n                    )}\n                    {contest.description && (\n                      <p className=\"text-sm text-muted-foreground mt-2\">{contest.description}</p>\n                    )}\n                  </div>\n                ))}\n                \n                {contests.length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No active contests at the moment\n                  </div>\n                )}\n              </div>\n              <Button className=\"w-full\" data-testid=\"button-view-contests\">\n                View All Contests\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* FAQ Section */}\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                  <HelpCircle className=\"text-secondary h-6 w-6\" />\n                </div>\n                <h3 className=\"text-2xl font-playfair font-bold text-primary\">FAQ</h3>\n              </div>\n              <div className=\"mb-6\">\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  {faqs.slice(0, 3).map((faq, index) => (\n                    <AccordionItem key={faq.id} value={`faq-${index}`} data-testid={`faq-${faq.id}`}>\n                      <AccordionTrigger className=\"text-left text-faq-question\">\n                        {faq.question}\n                      </AccordionTrigger>\n                      <AccordionContent className=\"text-sm text-muted-foreground text-faq-answer\">\n                        {faq.answer}\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n                \n                {faqs.length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No FAQs available\n                  </div>\n                )}\n              </div>\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-faqs\">\n                View All FAQs\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Q&A Forum */}\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-primary h-6 w-6\" />\n                </div>\n                <h3 className=\"text-2xl font-playfair font-bold text-primary\">Q&A Forum</h3>\n              </div>\n              <div className=\"space-y-4 mb-6\">\n                {forumPosts.slice(0, 2).map((post) => (\n                  <div key={post.id} className=\"border border-border rounded-lg p-4\" data-testid={`forum-post-${post.id}`}>\n                    <div className=\"flex items-start space-x-3\">\n                      {post.author?.profileImageUrl ? (\n                        <img \n                          src={post.author.profileImageUrl}\n                          alt={`${post.author.firstName || 'User'} avatar`}\n                          className=\"w-10 h-10 rounded-full object-cover\" \n                          data-testid={`img-forum-avatar-${post.id}`}\n                        />\n                      ) : (\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-primary font-medium\">\n                            {post.author?.firstName?.[0] || post.author?.email?.[0] || 'U'}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground text-sm text-forum-title\">{post.title}</h4>\n                        <div className=\"flex items-center space-x-4 mt-2\">\n                          <span className=\"text-xs text-muted-foreground\">\n                            @{post.author?.email?.split('@')[0] || 'user'}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(post.createdAt).toLocaleDateString()}\n                          </span>\n                          <span className=\"text-xs text-success text-forum-replies\">\n                            {post.replyCount} {post.replyCount === 1 ? 'reply' : 'replies'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {forumPosts.length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No forum posts yet\n                  </div>\n                )}\n              </div>\n              <Button className=\"w-full\" data-testid=\"button-join-discussion\">\n                Join Discussion\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8210},"client/src/components/contact/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertContactMessageSchema, type InsertContactMessage } from \"@shared/schema\";\nimport { Mail, Phone, MapPin, Linkedin, Twitter, Github, Send } from \"lucide-react\";\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertContactMessage>({\n    resolver: zodResolver(insertContactMessageSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContactMessage) => {\n      await apiRequest('POST', '/api/contact', data);\n    },\n    onSuccess: () => {\n      form.reset();\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message! I'll get back to you soon.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Error sending contact message:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContactMessage) => {\n    contactMutation.mutate(data);\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      label: \"Email\",\n      value: \"vaibhav.selukar@gmail.com\",\n      bgColor: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n    },\n    {\n      icon: Phone,\n      label: \"Phone\",\n      value: \"+91 880 555 5263\",\n      bgColor: \"bg-secondary/10\",\n      iconColor: \"text-secondary\",\n    },\n    {\n      icon: MapPin,\n      label: \"Location\",\n      value: \"Nagpur, Maharashtra, India\",\n      bgColor: \"bg-accent/10\",\n      iconColor: \"text-accent\",\n    },\n  ];\n\n  const socialLinks = [\n    {\n      icon: Linkedin,\n      href: \"#\",\n      bgColor: \"bg-primary\",\n      hoverColor: \"hover:bg-primary/90\",\n    },\n    {\n      icon: Twitter,\n      href: \"#\",\n      bgColor: \"bg-secondary\",\n      hoverColor: \"hover:bg-secondary/90\",\n    },\n    {\n      icon: Github,\n      href: \"#\",\n      bgColor: \"bg-accent\",\n      hoverColor: \"hover:bg-accent/90\",\n    },\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-20\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Wanna Get in Touch\n          </h2>\n          <h3 className=\"text-6xl font-playfair font-bold text-muted-foreground/20 mb-8\">\n            Contact Us\n          </h3>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16\">\n          <div>\n            <div className=\"space-y-8\">\n              <div>\n                <h3 className=\"text-2xl font-playfair font-semibold text-primary mb-6\">\n                  Let's Connect\n                </h3>\n                <p className=\"text-muted-foreground leading-relaxed mb-8\">\n                  Ready to discuss your next project or explore collaboration opportunities? \n                  I'm always excited to connect with fellow innovators and forward-thinking organizations.\n                </p>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {contactInfo.map((info, index) => {\n                  const IconComponent = info.icon;\n                  return (\n                    <div key={index} className=\"flex items-center space-x-4\" data-testid={`contact-info-${info.label.toLowerCase()}`}>\n                      <div className={`w-12 h-12 ${info.bgColor} rounded-lg flex items-center justify-center`}>\n                        <IconComponent className={`${info.iconColor} h-5 w-5`} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\">{info.label}</h4>\n                        <p className=\"text-muted-foreground text-contact-value\">{info.value}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <div className=\"flex space-x-4 pt-4\">\n                {socialLinks.map((social, index) => {\n                  const IconComponent = social.icon;\n                  return (\n                    <a \n                      key={index}\n                      href={social.href} \n                      className={`w-12 h-12 ${social.bgColor} text-white rounded-lg flex items-center justify-center ${social.hoverColor} transition-colors`}\n                      data-testid={`link-social-${index}`}\n                    >\n                      <IconComponent className=\"h-5 w-5\" />\n                    </a>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <Card>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-inter font-semibold text-primary mb-6\">\n                  Send a Message\n                </h3>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-contact\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                        Name\n                      </Label>\n                      <Input\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"Your name\"\n                        {...form.register(\"name\")}\n                        className=\"w-full\"\n                        data-testid=\"input-name\"\n                      />\n                      {form.formState.errors.name && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.name.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n                        Email\n                      </Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"your.email@company.com\"\n                        {...form.register(\"email\")}\n                        className=\"w-full\"\n                        data-testid=\"input-email\"\n                      />\n                      {form.formState.errors.email && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"subject\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      Subject\n                    </Label>\n                    <Input\n                      id=\"subject\"\n                      type=\"text\"\n                      placeholder=\"Project consultation\"\n                      {...form.register(\"subject\")}\n                      className=\"w-full\"\n                      data-testid=\"input-subject\"\n                    />\n                    {form.formState.errors.subject && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.subject.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"message\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      Message\n                    </Label>\n                    <Textarea\n                      id=\"message\"\n                      rows={6}\n                      placeholder=\"Tell me about your project...\"\n                      {...form.register(\"message\")}\n                      className=\"w-full resize-none\"\n                      data-testid=\"textarea-message\"\n                    />\n                    {form.formState.errors.message && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.message.message}\n                      </p>\n                    )}\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={contactMutation.isPending}\n                    data-testid=\"button-send-message\"\n                  >\n                    {contactMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        Send Message\n                        <Send className=\"ml-2 h-4 w-4\" />\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9587},"client/src/components/portfolio/about-section.tsx":{"content":"export default function AboutSection() {\n  const skills = [\n    { name: \"Project Management\", category: \"accent\" },\n    { name: \"Automation\", category: \"accent\" },\n    { name: \"Process Optimization\", category: \"accent\" },\n    { name: \"Agile Methodology\", category: \"muted\" },\n    { name: \"Team Leadership\", category: \"primary\" },\n    { name: \"Strategic Planning\", category: \"secondary\" },\n    { name: \"Cybersecurity\", category: \"muted\" },\n    { name: \"AI Integration\", category: \"muted\" },\n    { name: \"Digital Transformation\", category: \"primary\" },\n  ];\n\n  const getSkillClasses = (category: string) => {\n    switch (category) {\n      case \"primary\":\n        return \"px-6 py-3 bg-gradient-to-r from-accent to-orange-500 text-accent-foreground rounded-2xl text-base font-bold hover:scale-105 transition-all duration-300\";\n      case \"secondary\":\n        return \"px-6 py-3 card-modern text-foreground rounded-2xl text-base font-semibold border border-accent/30 hover:scale-105 transition-all duration-300\";\n      case \"accent\":\n        return \"px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-2xl text-base font-bold hover:scale-105 transition-all duration-300\";\n      case \"muted\":\n        return \"px-6 py-3 card-modern text-muted-foreground rounded-2xl text-base font-medium border border-muted hover:scale-105 transition-all duration-300\";\n      default:\n        return \"px-6 py-3 card-modern text-muted-foreground rounded-2xl text-base font-medium border border-muted hover:scale-105 transition-all duration-300\";\n    }\n  };\n\n  return (\n    <section\n      id=\"portfolio\"\n      className=\"section-padding bg-gradient-to-b from-background via-primary/5 to-background\"\n    >\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-20\">\n          <h2 className=\"gradient-text text-5xl lg:text-6xl font-playfair font-bold mb-6\">\n            Who I Am and What I Do\n          </h2>\n          <p className=\"text-xl lg:text-2xl text-muted-foreground max-w-4xl mx-auto leading-relaxed font-inter\">\n            Transforming businesses through innovative technology solutions and\n            strategic leadership\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n          <div>\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-3xl font-playfair font-bold text-foreground mb-6\">\n                  Professional Journey\n                </h3>\n                <p className=\"text-muted-foreground leading-relaxed text-large\">\n                  As a Senior Business Leader, a Professional Sr. Consultant,\n                  and a Project Management Office Lead, I bring together deep\n                  technical expertise with strategic business acumen to drive\n                  digital transformation initiatives.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-8\">\n                <div\n                  className=\"text-center card-elevated p-8\"\n                  data-testid=\"stat-experience\"\n                >\n                  <div className=\"text-5xl font-bold gradient-text mb-4\">\n                    18+\n                  </div>\n                  <div className=\"text-base text-muted-foreground font-semibold\">\n                    Years Experience\n                  </div>\n                </div>\n                <div\n                  className=\"text-center card-elevated p-8\"\n                  data-testid=\"stat-projects\"\n                >\n                  <div className=\"text-5xl font-bold gradient-text mb-4\">\n                    10+\n                  </div>\n                  <div className=\"text-base text-muted-foreground font-semibold\">\n                    Projects Completed\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"bg-gradient-to-br from-muted to-card p-8 rounded-2xl\">\n              <h3 className=\"text-xl font-playfair font-semibold text-primary mb-6 text-center\">\n                Core Expertise\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex flex-wrap gap-3\">\n                  {skills.slice(0, 3).map((skill, index) => (\n                    <span\n                      key={index}\n                      className={getSkillClasses(skill.category)}\n                      data-testid={`skill-${skill.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                    >\n                      {skill.name}\n                    </span>\n                  ))}\n                </div>\n                <div className=\"flex flex-wrap gap-3\">\n                  {skills.slice(3, 6).map((skill, index) => (\n                    <span\n                      key={index}\n                      className={getSkillClasses(skill.category)}\n                      data-testid={`skill-${skill.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                    >\n                      {skill.name}\n                    </span>\n                  ))}\n                </div>\n                <div className=\"flex flex-wrap gap-3\">\n                  {skills.slice(6, 9).map((skill, index) => (\n                    <span\n                      key={index}\n                      className={getSkillClasses(skill.category)}\n                      data-testid={`skill-${skill.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                    >\n                      {skill.name}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5686},"client/src/components/portfolio/certifications-section.tsx":{"content":"import { Award, Calendar, ExternalLink, Star, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Certification } from \"@shared/schema\";\n\nexport default function CertificationsSection() {\n  const { data: certifications = [], isLoading } = useQuery<Certification[]>({\n    queryKey: ['/api/certifications'],\n  });\n\n  const { data: featuredCertifications = [] } = useQuery<Certification[]>({\n    queryKey: ['/api/certifications', 'featured'],\n    queryFn: async () => {\n      const response = await fetch('/api/certifications?featured=true');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n              Professional Certifications\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading certifications...\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-card rounded-lg p-6 shadow\">\n                  <div className=\"h-6 bg-muted rounded w-2/3 mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded w-full mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return '';\n    return format(parseISO(dateString), 'MMM yyyy');\n  };\n\n  return (\n    <section className=\"py-24 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Professional Certifications\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Continuous learning and professional development through industry-recognized certifications in project management, agile methodologies, and emerging technologies.\n          </p>\n        </div>\n\n        {/* Featured Certifications */}\n        {featuredCertifications.length > 0 && (\n          <div className=\"mb-16\">\n            <div className=\"flex items-center gap-2 mb-8\">\n              <Star className=\"h-6 w-6 text-accent\" />\n              <h3 className=\"text-2xl font-bold text-foreground\">Featured Certifications</h3>\n            </div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n              {featuredCertifications.map((cert) => (\n                <Card \n                  key={cert.id} \n                  className=\"relative overflow-hidden hover:shadow-xl transition-all duration-300 border-2 border-accent/20 bg-gradient-to-br from-card to-accent/5\"\n                  data-testid={`featured-cert-${cert.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <div className=\"absolute top-4 right-4\">\n                    <Badge className=\"bg-accent text-accent-foreground\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      Featured\n                    </Badge>\n                  </div>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-3 bg-primary/10 rounded-lg\">\n                        <Award className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-bold text-foreground leading-tight\">\n                          {cert.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-primary font-semibold mt-1\">\n                          {cert.provider}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Issued {formatDate(cert.issueDate)}</span>\n                    </div>\n                    \n                    {cert.description && (\n                      <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                        {cert.description}\n                      </p>\n                    )}\n                    \n                    {cert.skills && cert.skills.length > 0 && (\n                      <div>\n                        <h5 className=\"text-sm font-semibold text-foreground mb-2\">Skills Covered</h5>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {cert.skills.map((skill, i) => (\n                            <Badge \n                              key={i} \n                              variant=\"outline\" \n                              className=\"text-xs bg-primary/5 text-primary border-primary/20\"\n                            >\n                              {skill}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {cert.credentialUrl && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full\"\n                        onClick={() => cert.credentialUrl && window.open(cert.credentialUrl, '_blank')}\n                      >\n                        <ExternalLink className=\"h-3 w-3 mr-2\" />\n                        View Credential\n                      </Button>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* All Certifications */}\n        <div>\n          <div className=\"flex items-center gap-2 mb-8\">\n            <CheckCircle className=\"h-6 w-6 text-primary\" />\n            <h3 className=\"text-2xl font-bold text-foreground\">All Certifications</h3>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {certifications.length} Total\n            </Badge>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {certifications.map((cert) => (\n              <Card \n                key={cert.id} \n                className=\"hover:shadow-lg transition-all duration-300 bg-card\"\n                data-testid={`cert-${cert.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                      <Award className=\"h-5 w-5 text-secondary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-base font-bold text-foreground leading-tight\">\n                        {cert.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-secondary font-medium mt-1\">\n                        {cert.provider}\n                      </p>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span className=\"text-xs\">Issued {formatDate(cert.issueDate)}</span>\n                  </div>\n                  \n                  {cert.description && (\n                    <p className=\"text-xs text-muted-foreground leading-relaxed line-clamp-3\">\n                      {cert.description}\n                    </p>\n                  )}\n                  \n                  {cert.skills && cert.skills.length > 0 && (\n                    <div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {cert.skills.slice(0, 3).map((skill, i) => (\n                          <Badge \n                            key={i} \n                            variant=\"secondary\" \n                            className=\"text-xs bg-secondary/10 text-secondary\"\n                          >\n                            {skill}\n                          </Badge>\n                        ))}\n                        {cert.skills.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{cert.skills.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {cert.credentialUrl && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full text-xs\"\n                      onClick={() => cert.credentialUrl && window.open(cert.credentialUrl, '_blank')}\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-2\" />\n                      View Credential\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Certification Stats */}\n        <div className=\"mt-16 bg-muted/50 rounded-xl p-8\">\n          <div className=\"grid md:grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {certifications.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Total Certifications\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-secondary mb-2\">\n                {featuredCertifications.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Featured Credentials\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent mb-2\">\n                {new Set(certifications.flatMap(cert => cert.provider || [])).size}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Certification Providers\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {new Set(certifications.flatMap(cert => cert.skills || [])).size}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Skills Validated\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":11425},"client/src/components/portfolio/experience-section.tsx":{"content":"import { Calendar, MapPin, Building, Award, Users, TrendingUp, Briefcase } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, parseISO } from \"date-fns\";\nimport type { EmploymentExperience } from \"@shared/schema\";\n\nexport default function ExperienceSection() {\n  const { data: experiences = [], isLoading } = useQuery<EmploymentExperience[]>({\n    queryKey: ['/api/employment-experience'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-24 bg-muted\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n              Professional Experience\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading professional journey...\n            </p>\n          </div>\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-card rounded-lg p-6 shadow\">\n                  <div className=\"h-6 bg-muted rounded w-1/3 mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded w-full mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const formatDateRange = (startDate: string | null, endDate: string | null, isCurrent: boolean | null) => {\n    if (!startDate) return '';\n    \n    const start = format(parseISO(startDate), 'MMM yyyy');\n    if (isCurrent || !endDate) {\n      return `${start} - Present`;\n    }\n    const end = format(parseISO(endDate), 'MMM yyyy');\n    return `${start} - ${end}`;\n  };\n\n  return (\n    <section className=\"py-24 bg-muted\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Professional Experience\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            A comprehensive journey through {experiences.length}+ years of experience in project management, SaaS delivery, and technology leadership across BFSI, EdTech, and enterprise domains. Plus 11+ years experience in US Retirement Insurance Back Office Process and Business Process Outsourcing domains.\n          </p>\n        </div>\n\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"relative\">\n            {/* Timeline line */}\n            <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary/40 to-primary/60\"></div>\n            \n            {experiences.map((experience, index) => (\n              <div key={experience.id} className=\"relative flex items-start mb-12\" data-testid={`experience-${experience.company.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {/* Timeline dot */}\n                <div className=\"absolute left-6 w-4 h-4 bg-primary rounded-full border-4 border-background shadow-lg z-10\"></div>\n                \n                {/* Content */}\n                <div className=\"ml-16 w-full\">\n                  <Card className=\"w-full hover:shadow-xl transition-all duration-300 border-l-4 border-l-primary bg-gradient-to-r from-card to-primary/5\">\n                    <CardHeader className=\"pb-4\">\n                      <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-2xl font-bold text-primary mb-2 flex items-center gap-2\">\n                            <Briefcase className=\"h-5 w-5\" />\n                            {experience.position}\n                          </CardTitle>\n                          <div className=\"flex flex-col sm:flex-row sm:items-center gap-4 text-muted-foreground\">\n                            <div className=\"flex items-center gap-2 font-semibold\">\n                              <Building className=\"h-4 w-4 text-primary\" />\n                              <span>{experience.company}</span>\n                            </div>\n                            {experience.location && (\n                              <div className=\"flex items-center gap-2\">\n                                <MapPin className=\"h-4 w-4 text-secondary\" />\n                                <span>{experience.location}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"lg:text-right mt-4 lg:mt-0\">\n                          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span className=\"text-sm\">\n                              {formatDateRange(experience.startDate, experience.endDate, experience.isCurrent)}\n                            </span>\n                          </div>\n                          {experience.isCurrent && (\n                            <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                              Current Position\n                            </Badge>\n                          )}\n                          {experience.domain && (\n                            <Badge variant=\"outline\" className=\"ml-2\">\n                              {experience.domain}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent className=\"space-y-6\">\n                      {experience.description && (\n                        <p className=\"text-foreground leading-relaxed text-lg\">\n                          {experience.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"grid md:grid-cols-2 gap-6\">\n                        {/* Key Achievements */}\n                        {experience.achievements && experience.achievements.length > 0 && (\n                          <div>\n                            <h4 className=\"font-semibold text-foreground mb-3 flex items-center gap-2\">\n                              <Award className=\"h-5 w-5 text-accent\" />\n                              Key Achievements\n                            </h4>\n                            <ul className=\"space-y-2\">\n                              {experience.achievements.map((achievement, i) => (\n                                <li key={i} className=\"flex items-start gap-3 text-muted-foreground\">\n                                  <TrendingUp className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                                  <span className=\"text-sm leading-relaxed\">{achievement}</span>\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                        \n                        {/* Responsibilities */}\n                        {experience.responsibilities && experience.responsibilities.length > 0 && (\n                          <div>\n                            <h4 className=\"font-semibold text-foreground mb-3 flex items-center gap-2\">\n                              <Users className=\"h-5 w-5 text-secondary\" />\n                              Key Responsibilities\n                            </h4>\n                            <ul className=\"space-y-2\">\n                              {experience.responsibilities.map((responsibility, i) => (\n                                <li key={i} className=\"flex items-start gap-3 text-muted-foreground\">\n                                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                                  <span className=\"text-sm leading-relaxed\">{responsibility}</span>\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Technologies */}\n                      {experience.technologies && experience.technologies.length > 0 && (\n                        <>\n                          <Separator className=\"my-4\" />\n                          <div>\n                            <h4 className=\"font-semibold text-foreground mb-3\">Technologies & Skills</h4>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {experience.technologies.map((tech, i) => (\n                                <Badge \n                                  key={i} \n                                  variant=\"secondary\" \n                                  className=\"bg-primary/10 text-primary hover:bg-primary/20 transition-colors\"\n                                >\n                                  {tech}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9780},"client/src/components/portfolio/footer.tsx":{"content":"import { Github, Linkedin, Twitter } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-primary text-primary-foreground py-16\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <h3 className=\"text-2xl font-playfair font-bold mb-4\">Vaibhav Selukar</h3>\n            <p className=\"text-primary-foreground/80 mb-6 leading-relaxed\">\n              Empowering businesses through strategic technology leadership and innovative solutions. \n              Let's build the future together.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary-foreground/10 rounded-lg flex items-center justify-center hover:bg-primary-foreground/20 transition-colors\"\n                data-testid=\"link-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary-foreground/10 rounded-lg flex items-center justify-center hover:bg-primary-foreground/20 transition-colors\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary-foreground/10 rounded-lg flex items-center justify-center hover:bg-primary-foreground/20 transition-colors\"\n                data-testid=\"link-github\"\n              >\n                <Github className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-primary-foreground/80\">\n              <li><a href=\"#portfolio\" className=\"hover:text-primary-foreground transition-colors\">Portfolio</a></li>\n              <li><a href=\"#blog\" className=\"hover:text-primary-foreground transition-colors\">Blog</a></li>\n              <li><a href=\"#community\" className=\"hover:text-primary-foreground transition-colors\">Community</a></li>\n              <li><a href=\"#contact\" className=\"hover:text-primary-foreground transition-colors\">Contact</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Services</h4>\n            <ul className=\"space-y-2 text-primary-foreground/80\">\n              <li><a href=\"#\" className=\"hover:text-primary-foreground transition-colors\">Strategy Consulting</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary-foreground transition-colors\">Project Management</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary-foreground transition-colors\">Cybersecurity</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary-foreground transition-colors\">AI Integration</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-primary-foreground/20 mt-12 pt-8 text-center\">\n          <p className=\"text-primary-foreground/60\">\n            &copy; 2024 Vaibhav Selukar. All rights reserved. Built with passion for innovation.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3341},"client/src/components/portfolio/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  Download,\n  Briefcase,\n  Award,\n  TrendingUp,\n  Users,\n  Star,\n} from \"lucide-react\";\nimport profileImage from \"@assets/vs_1756632353606.jpg\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative overflow-hidden min-h-screen flex items-center\">\n      {/* Modern Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-background via-primary/50 to-background\"></div>\n      <div className=\"absolute top-10 right-10 w-96 h-96 bg-gradient-to-r from-accent/20 to-orange-400/20 rounded-full blur-3xl animate-pulse-glow\"></div>\n      <div className=\"absolute bottom-10 left-10 w-64 h-64 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full blur-2xl animate-pulse-glow delay-1000\"></div>\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-accent/5 to-transparent\"></div>\n\n      <div className=\"relative max-w-7xl mx-auto px-6 py-24 z-10\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n          <div className=\"space-y-8\">\n            {/* Achievement Badge */}\n            <div className=\"inline-flex items-center px-6 py-3 rounded-full card-modern border border-accent/30 text-accent font-bold text-sm backdrop-blur-xl\">\n              <Award className=\"h-5 w-5 mr-3\" />\n              18+ Years Excellence\n            </div>\n\n            <h1 className=\"text-6xl lg:text-8xl font-playfair font-bold leading-tight\">\n              Hello, I am <br />\n              <span className=\"gradient-text animate-pulse-glow\">\n                Vaibhav Selukar\n              </span>\n            </h1>\n            <p className=\"text-xl lg:text-2xl text-muted-foreground leading-relaxed font-inter max-w-4xl\">\n              A visionary leader, bridging the gap between technology and\n              business to create meaningful impact.\n            </p>\n\n            {/* Achievement Stats */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"card-elevated p-6 text-center group\">\n                <div className=\"text-4xl font-bold gradient-text mb-3\">10+</div>\n                <div className=\"text-sm text-muted-foreground font-semibold\">\n                  Projects\n                </div>\n              </div>\n              <div className=\"card-elevated p-6 text-center group\">\n                <div className=\"text-4xl font-bold gradient-text mb-3\">98%</div>\n                <div className=\"text-sm text-muted-foreground font-semibold\">\n                  Satisfaction\n                </div>\n              </div>\n              <div className=\"card-elevated p-6 text-center group\">\n                <div className=\"text-4xl font-bold text-purple-400 mb-3\">\n                  50+\n                </div>\n                <div className=\"text-sm text-muted-foreground font-semibold\">\n                  Ideas\n                </div>\n              </div>\n              <div className=\"card-elevated p-6 text-center group\">\n                <div className=\"text-4xl font-bold text-purple-400 mb-3\">4</div>\n                <div className=\"text-sm text-muted-foreground font-semibold\">\n                  Products\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-6\">\n              <Button\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-accent to-orange-500 text-accent-foreground font-bold text-xl px-10 py-6 hover:from-orange-400 hover:to-accent hover:shadow-2xl hover:shadow-accent/30 transition-all duration-500 transform hover:scale-105 rounded-2xl\"\n                data-testid=\"button-view-work\"\n              >\n                <Briefcase className=\"mr-3 h-7 w-7\" />\n                View My Work\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-accent/50 text-foreground card-modern font-bold text-xl px-10 py-6 hover:border-accent hover:bg-accent/10 hover:shadow-xl transition-all duration-500 transform hover:scale-105 rounded-2xl\"\n                data-testid=\"button-download-resume\"\n              >\n                <Download className=\"mr-3 h-7 w-7\" />\n                Download Resume\n              </Button>\n            </div>\n          </div>\n          <div className=\"flex justify-center lg:justify-end\">\n            <div className=\"relative group\">\n              {/* Modern Animated Border */}\n              <div className=\"absolute -inset-8 bg-gradient-to-r from-accent via-orange-400 to-purple-500 rounded-full opacity-20 animate-pulse-glow group-hover:opacity-40 transition-opacity duration-500\"></div>\n              <div className=\"absolute -inset-6 bg-gradient-to-r from-purple-500 via-pink-500 to-accent rounded-full opacity-15 animate-pulse-glow delay-700 group-hover:opacity-30 transition-opacity duration-500\"></div>\n\n              <div className=\"relative card-elevated p-8 rounded-full shadow-2xl\">\n                <img\n                  src={profileImage}\n                  alt=\"Vaibhav Selukar professional headshot\"\n                  className=\"relative w-96 h-96 rounded-full object-cover shadow-2xl border-4 border-accent/30 group-hover:border-accent/70 transition-all duration-500\"\n                  data-testid=\"img-hero-profile\"\n                />\n\n                {/* Modern Achievement Badges */}\n                <div className=\"absolute -top-4 -left-4 card-elevated bg-gradient-to-r from-purple-500 to-pink-500 text-white p-4 rounded-2xl shadow-2xl hover:scale-110 transition-transform duration-300\">\n                  <Star className=\"w-8 h-8\" />\n                </div>\n\n                <div className=\"absolute -bottom-6 -right-6 card-elevated bg-gradient-to-r from-accent to-orange-500 text-accent-foreground p-5 rounded-2xl shadow-2xl hover:scale-110 transition-transform duration-300\">\n                  <TrendingUp className=\"w-10 h-10\" />\n                </div>\n\n                <div className=\"absolute -top-4 -right-4 card-elevated text-foreground p-4 rounded-2xl shadow-2xl border border-accent/30 hover:scale-110 transition-transform duration-300\">\n                  <Users className=\"w-8 h-8\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6363},"client/src/components/portfolio/navigation-header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, Eye, User, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function NavigationHeader() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const isAdminView = location === \"/admin\";\n\n  return (\n    <nav className=\"sticky top-0 z-50 border-b border-slate-700/50 bg-slate-900/95 backdrop-blur-xl shadow-xl\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <h1 className=\"text-xl font-playfair font-bold bg-gradient-to-r from-gold to-yellow-400 bg-clip-text text-transparent\">\n                Vaibhav Selukar\n              </h1>\n            </Link>\n            <span className=\"hidden md:block text-sm text-gray-400 font-medium\">\n              Visionary Leader & AI Expert\n            </span>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"#portfolio\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-portfolio\">\n              Portfolio\n            </a>\n            <a href=\"#product-hunt\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-products\">\n              Products\n            </a>\n            <a href=\"#product-videos\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-videos\">\n              Videos\n            </a>\n            <a href=\"#blog\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-blog\">\n              Blog\n            </a>\n            <a href=\"#community\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-community\">\n              Community\n            </a>\n            <a href=\"#contact\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium hover:scale-105\" data-testid=\"link-contact\">\n              Contact\n            </a>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {isAuthenticated && user?.isAdmin && (\n              <Link href={isAdminView ? \"/\" : \"/admin\"} data-testid=\"link-admin-toggle\">\n                <Button variant=\"outline\" size=\"sm\">\n                  {isAdminView ? (\n                    <>\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      Public View\n                    </>\n                  ) : (\n                    <>\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Admin View\n                    </>\n                  )}\n                </Button>\n              </Link>\n            )}\n            \n            {isAuthenticated ? (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                <User className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            ) : (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-login\"\n              >\n                <User className=\"h-4 w-4 mr-2\" />\n                Login\n              </Button>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t border-slate-700/50 py-4 bg-slate-800/50 backdrop-blur-xl\">\n            <div className=\"flex flex-col space-y-4\">\n              <a href=\"#portfolio\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Portfolio\n              </a>\n              <a href=\"#product-hunt\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Products\n              </a>\n              <a href=\"#product-videos\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Videos\n              </a>\n              <a href=\"#blog\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Blog\n              </a>\n              <a href=\"#community\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Community\n              </a>\n              <a href=\"#contact\" className=\"text-gray-300 hover:text-gold transition-all duration-300 font-medium px-2 py-1 rounded hover:bg-slate-700/50\">\n                Contact\n              </a>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5743},"client/src/components/portfolio/projects-section.tsx":{"content":"import { ExternalLink, Github, Calendar, Users, Target, Trophy, Code, Briefcase } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Project } from \"@shared/schema\";\n\nexport default function ProjectsSection() {\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  const { data: featuredProjects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects', 'featured'],\n    queryFn: async () => {\n      const response = await fetch('/api/projects?featured=true');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-24 bg-muted\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n              Featured Projects\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading project portfolio...\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-card rounded-lg p-6 shadow\">\n                  <div className=\"h-6 bg-muted rounded w-2/3 mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded w-full mb-4\"></div>\n                  <div className=\"h-20 bg-muted rounded mb-4\"></div>\n                  <div className=\"flex gap-2\">\n                    <div className=\"h-6 bg-muted rounded w-16\"></div>\n                    <div className=\"h-6 bg-muted rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const formatDateRange = (startDate: string | null, endDate: string | null) => {\n    if (!startDate) return '';\n    \n    const start = format(parseISO(startDate), 'MMM yyyy');\n    if (!endDate) {\n      return `${start} - Present`;\n    }\n    const end = format(parseISO(endDate), 'MMM yyyy');\n    return `${start} - ${end}`;\n  };\n\n  return (\n    <section className=\"py-24 bg-muted\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Featured Projects\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Showcase of impactful projects across BFSI, SaaS, and enterprise domains, demonstrating expertise in project management, system design, and stakeholder engagement.\n          </p>\n        </div>\n\n        {/* Featured Projects */}\n        {featuredProjects.length > 0 && (\n          <div className=\"mb-16\">\n            <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n              {featuredProjects.map((project) => (\n                <Card \n                  key={project.id} \n                  className=\"group hover:shadow-2xl transition-all duration-500 border-2 border-primary/20 bg-gradient-to-br from-card to-primary/5 overflow-hidden\"\n                  data-testid={`featured-project-${project.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-secondary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                  \n                  <CardHeader className=\"relative z-10 pb-4\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-3 bg-primary/10 rounded-lg group-hover:bg-primary/20 transition-colors\">\n                          <Briefcase className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-xl font-bold text-foreground group-hover:text-primary transition-colors\">\n                            {project.title}\n                          </CardTitle>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {project.domain}\n                            </Badge>\n                            {project.isFeatured && (\n                              <Badge className=\"bg-accent text-accent-foreground text-xs\">\n                                Featured\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground\">\n                      {project.company && (\n                        <div className=\"flex items-center gap-1\">\n                          <Briefcase className=\"h-3 w-3\" />\n                          <span>{project.company}</span>\n                        </div>\n                      )}\n                      {(project.startDate || project.endDate) && (\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          <span>{formatDateRange(project.startDate, project.endDate)}</span>\n                        </div>\n                      )}\n                      {project.teamSize && (\n                        <div className=\"flex items-center gap-1\">\n                          <Users className=\"h-3 w-3\" />\n                          <span>{project.teamSize}</span>\n                        </div>\n                      )}\n                      {project.duration && (\n                        <div className=\"flex items-center gap-1\">\n                          <Target className=\"h-3 w-3\" />\n                          <span>{project.duration}</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"relative z-10 space-y-6\">\n                    {project.description && (\n                      <p className=\"text-foreground leading-relaxed\">\n                        {project.description}\n                      </p>\n                    )}\n                    \n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      {/* Key Achievements */}\n                      {project.achievements && project.achievements.length > 0 && (\n                        <div>\n                          <h4 className=\"font-semibold text-foreground mb-3 flex items-center gap-2\">\n                            <Trophy className=\"h-4 w-4 text-accent\" />\n                            Key Achievements\n                          </h4>\n                          <ul className=\"space-y-1\">\n                            {project.achievements.slice(0, 3).map((achievement, i) => (\n                              <li key={i} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                                <div className=\"w-1.5 h-1.5 bg-accent rounded-full mt-1.5 flex-shrink-0\"></div>\n                                <span>{achievement}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {/* Challenges & Outcomes */}\n                      {(project.challenges || project.outcomes) && (\n                        <div className=\"space-y-3\">\n                          {project.challenges && project.challenges.length > 0 && (\n                            <div>\n                              <h5 className=\"text-sm font-semibold text-foreground mb-2\">Key Challenges</h5>\n                              <ul className=\"space-y-1\">\n                                {project.challenges.slice(0, 2).map((challenge, i) => (\n                                  <li key={i} className=\"text-xs text-muted-foreground flex items-start gap-2\">\n                                    <span className=\"text-orange-500 font-bold\">•</span>\n                                    <span>{challenge}</span>\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                          \n                          {project.outcomes && project.outcomes.length > 0 && (\n                            <div>\n                              <h5 className=\"text-sm font-semibold text-foreground mb-2\">Outcomes</h5>\n                              <ul className=\"space-y-1\">\n                                {project.outcomes.slice(0, 2).map((outcome, i) => (\n                                  <li key={i} className=\"text-xs text-muted-foreground flex items-start gap-2\">\n                                    <span className=\"text-green-500 font-bold\">•</span>\n                                    <span>{outcome}</span>\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Technologies */}\n                    {project.technologies && project.technologies.length > 0 && (\n                      <>\n                        <Separator />\n                        <div>\n                          <h4 className=\"font-semibold text-foreground mb-3 flex items-center gap-2\">\n                            <Code className=\"h-4 w-4 text-secondary\" />\n                            Technologies & Methodologies\n                          </h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {project.technologies.map((tech, i) => (\n                              <Badge \n                                key={i} \n                                variant=\"secondary\" \n                                className=\"bg-secondary/10 text-secondary hover:bg-secondary/20 transition-colors text-xs\"\n                              >\n                                {tech}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {/* Project Details */}\n                    <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted/30 rounded-lg\">\n                      {project.role && (\n                        <div>\n                          <h5 className=\"text-xs font-semibold text-muted-foreground mb-1\">Role</h5>\n                          <p className=\"text-sm font-medium text-foreground\">{project.role}</p>\n                        </div>\n                      )}\n                      {project.methodology && (\n                        <div>\n                          <h5 className=\"text-xs font-semibold text-muted-foreground mb-1\">Methodology</h5>\n                          <p className=\"text-sm font-medium text-foreground\">{project.methodology}</p>\n                        </div>\n                      )}\n                      {project.client && (\n                        <div>\n                          <h5 className=\"text-xs font-semibold text-muted-foreground mb-1\">Client</h5>\n                          <p className=\"text-sm font-medium text-foreground\">{project.client}</p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Project Summary */}\n                    <div className=\"bg-primary/5 rounded-lg p-3\">\n                      <p className=\"text-sm text-primary font-medium\">\n                        Successfully delivered {project.domain} project with {project.methodology || 'standard'} methodology\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* All Projects Grid */}\n        {projects.length > featuredProjects.length && (\n          <div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-8 text-center\">\n              Additional Projects\n            </h3>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {projects.filter(p => !p.isFeatured).map((project) => (\n                <Card \n                  key={project.id} \n                  className=\"hover:shadow-lg transition-all duration-300\"\n                  data-testid={`project-${project.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg font-bold text-foreground flex items-center gap-2\">\n                      <Code className=\"h-4 w-4 text-primary\" />\n                      {project.title}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {project.domain}\n                      </Badge>\n                      {project.company && (\n                        <span className=\"text-xs text-muted-foreground\">@ {project.company}</span>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    {project.description && (\n                      <p className=\"text-sm text-muted-foreground leading-relaxed line-clamp-3\">\n                        {project.description}\n                      </p>\n                    )}\n                    \n                    {project.technologies && project.technologies.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {project.technologies.slice(0, 4).map((tech, i) => (\n                          <Badge \n                            key={i} \n                            variant=\"secondary\" \n                            className=\"text-xs bg-primary/5 text-primary\"\n                          >\n                            {tech}\n                          </Badge>\n                        ))}\n                        {project.technologies.length > 4 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{project.technologies.length - 4}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                    \n                    <div className=\"text-center\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {formatDateRange(project.startDate, project.endDate)}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Project Stats */}\n        <div className=\"mt-16 bg-background/50 rounded-xl p-8\">\n          <div className=\"grid md:grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {projects.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Total Projects\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-secondary mb-2\">\n                {featuredProjects.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Featured Projects\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent mb-2\">\n                {new Set(projects.map(p => p.domain)).size}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Industry Domains\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {new Set(projects.flatMap(p => p.technologies || [])).size}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Technologies Used\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":16891},"client/src/components/portfolio/testimonials-section.tsx":{"content":"import prafulImage from \"@assets/Praful-Lichade-LinkedIn-08-31-2025_03_19_PM_1756633834648.png\";\nimport vikrantImage from \"@assets/Vikrant-Salpekar-LinkedIn-08-31-2025_03_19_PM_1756633834651.png\";\nimport aaswadImage from \"@assets/Aaswad-Waghmare-LinkedIn-08-31-2025_03_19_PM_1756633834650.png\";\n\nexport default function TestimonialsSection() {\n  const testimonials = [\n    {\n      name: \"Praful Lichade\",\n      title: \"Founder and CEO, Pragmatyc\",\n      content: \"I've witnessed Vaibhav's incredible journey at Pragmatyc, from Associate BA to successfully establishing and managing the PMO function. He's a proactive leader who excels in initiating processes, defining strategies, and ensuring operational adherence. In his previous role as a Senior Business Analyst, Vaibhav's probing skills and meticulous documentation made significant contributions to our projects. He's a true asset, consistently driving success from inception.\",\n      avatar: prafulImage,\n    },\n    {\n      name: \"Vikrant Salpekar\",\n      title: \"Co-founder and Director, RightZero Solutions Pvt. Ltd.\",\n      content: \"I had the privilege of collaborating with Vaibhav and I am consistently impressed by his focused and straightforward approach. His exceptional strategic planning skills were evident in every task we worked on together. What truly sets Vaibhav apart is his keen eye for details. Vaibhav meticulously analyzes each aspect of our initiatives, ensuring nothing is overlooked. His dedication to precision greatly contributes to our team's achievements. I wholeheartedly endorse Vaibhav for his exceptional ability to combine strategic thinking with an unwavering attention to detail.\",\n      avatar: vikrantImage,\n    },\n    {\n      name: \"Aaswad Waghmare\",\n      title: \"Senior Delivery Manager - Projects & Programs | Product Engineering & Implementations | Agile Leader | Coach & Mentor\",\n      content: \"Vaibhav is very focused professional who makes sure that the given tasks are being executed no matter what. When it comes to following processes he is very particular at it, if not being followed, help others understand the consequences in the most effective manner. He is a firm believer of giving the best in any given situation and it was evident from the results he produced at MAXIMESS. I wish him all the best for PMO journey!\",\n      avatar: aaswadImage,\n    },\n  ];\n\n  return (\n    <section className=\"py-20\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            What My Colleagues Say\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Feedback from industry professionals and collaborators\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {testimonials.map((testimonial, index) => (\n            <div \n              key={index} \n              className=\"bg-card border border-border rounded-2xl p-8\"\n              data-testid={`testimonial-${testimonial.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <div className=\"flex items-start space-x-4 mb-6\">\n                <img \n                  src={testimonial.avatar}\n                  alt={`${testimonial.name} professional headshot`}\n                  className=\"w-16 h-16 rounded-full object-cover\" \n                  data-testid={`img-testimonial-${index}`}\n                />\n                <div>\n                  <h4 className=\"font-semibold text-foreground text-testimonial-name\">\n                    {testimonial.name}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground text-testimonial-title\">\n                    {testimonial.title}\n                  </p>\n                </div>\n              </div>\n              <blockquote className=\"text-muted-foreground italic leading-relaxed text-testimonial-content\">\n                \"{testimonial.content}\"\n              </blockquote>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4118},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/portfolio/skills-section.tsx":{"content":"import { Code, Star, TrendingUp, Award, Zap, Target } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Skill } from \"@shared/schema\";\n\nexport default function SkillsSection() {\n  const { data: skillsByCategory = {}, isLoading } = useQuery<Record<string, Skill[]>>({\n    queryKey: ['/api/skills', 'byCategory'],\n    queryFn: async () => {\n      const response = await fetch('/api/skills?byCategory=true');\n      return response.json();\n    }\n  });\n\n  const { data: featuredSkills = [] } = useQuery<Skill[]>({\n    queryKey: ['/api/skills', 'featured'],\n    queryFn: async () => {\n      const response = await fetch('/api/skills?featured=true');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n              Technical Skills & Expertise\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading skills portfolio...\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-card rounded-lg p-6 shadow\">\n                  <div className=\"h-6 bg-muted rounded w-2/3 mb-4\"></div>\n                  <div className=\"space-y-3\">\n                    {[...Array(4)].map((_, j) => (\n                      <div key={j} className=\"h-4 bg-muted rounded w-full\"></div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const getProficiencyLabel = (level: number | null) => {\n    if (!level) return 'Beginner';\n    switch (level) {\n      case 1: return 'Beginner';\n      case 2: return 'Novice';\n      case 3: return 'Intermediate';\n      case 4: return 'Advanced';\n      case 5: return 'Expert';\n      default: return 'Beginner';\n    }\n  };\n\n  const getProficiencyColor = (level: number | null) => {\n    if (!level) return 'bg-gray-400';\n    switch (level) {\n      case 1: return 'bg-red-400';\n      case 2: return 'bg-orange-400';\n      case 3: return 'bg-yellow-400';\n      case 4: return 'bg-blue-400';\n      case 5: return 'bg-green-400';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'project management':\n        return Target;\n      case 'tools':\n        return Code;\n      case 'communication':\n        return Star;\n      case 'design':\n        return Award;\n      case 'technical':\n        return Zap;\n      default:\n        return TrendingUp;\n    }\n  };\n\n  const categoryOrder = [\n    'Project Management',\n    'Tools', \n    'Soft Skills',\n    'Communication',\n    'Productivity',\n    'Design',\n    'Technical'\n  ];\n\n  const sortedCategories = categoryOrder.filter(cat => skillsByCategory[cat]);\n  const otherCategories = Object.keys(skillsByCategory).filter(cat => !categoryOrder.includes(cat));\n  const allCategories = [...sortedCategories, ...otherCategories];\n\n  return (\n    <section className=\"py-24 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Technical Skills & Expertise\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Comprehensive technology stack and professional competencies developed through {Math.max(...Object.values(skillsByCategory).flat().map(s => s.yearsOfExperience || 0))}+ years of hands-on experience across diverse domains.\n          </p>\n        </div>\n\n        {/* Featured Skills Highlight */}\n        {featuredSkills.length > 0 && (\n          <div className=\"mb-16\">\n            <div className=\"flex items-center gap-2 mb-8 justify-center\">\n              <Star className=\"h-6 w-6 text-accent\" />\n              <h3 className=\"text-2xl font-bold text-foreground\">Core Competencies</h3>\n            </div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n              {featuredSkills.slice(0, 8).map((skill) => (\n                <Card \n                  key={skill.id} \n                  className=\"text-center hover:shadow-lg transition-all duration-300 border-2 border-accent/20 bg-gradient-to-br from-card to-accent/5\"\n                  data-testid={`featured-skill-${skill.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"mb-4\">\n                      <div className={`w-12 h-12 ${getProficiencyColor(skill.proficiencyLevel)} rounded-full mx-auto mb-3 flex items-center justify-center`}>\n                        <span className=\"text-white font-bold text-lg\">\n                          {skill.proficiencyLevel || 1}\n                        </span>\n                      </div>\n                      <h4 className=\"font-bold text-foreground text-lg mb-1\">\n                        {skill.name}\n                      </h4>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {getProficiencyLabel(skill.proficiencyLevel)}\n                      </p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"text-xs text-muted-foreground\">\n                        {skill.yearsOfExperience}+ years experience\n                      </div>\n                      <Progress \n                        value={(skill.proficiencyLevel || 1) * 20} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Skills by Category */}\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {allCategories.map((category) => {\n            const categorySkills = skillsByCategory[category] || [];\n            const IconComponent = getCategoryIcon(category);\n            \n            return (\n              <Card \n                key={category} \n                className=\"hover:shadow-xl transition-all duration-300\"\n                data-testid={`skill-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-3 text-xl text-foreground\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <IconComponent className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    {category}\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {categorySkills.length} skills\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  {categorySkills.map((skill) => (\n                    <div \n                      key={skill.id} \n                      className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg hover:bg-muted/50 transition-colors\"\n                      data-testid={`skill-${skill.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h5 className=\"font-semibold text-foreground\">\n                            {skill.name}\n                          </h5>\n                          {skill.isFeatured && (\n                            <Badge className=\"bg-accent text-accent-foreground text-xs\">\n                              Featured\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <span>{getProficiencyLabel(skill.proficiencyLevel)}</span>\n                          <span>{skill.yearsOfExperience}+ years</span>\n                        </div>\n                        <Progress \n                          value={(skill.proficiencyLevel || 1) * 20} \n                          className=\"h-1.5 mt-2\"\n                        />\n                      </div>\n                      <div className=\"ml-4 text-right\">\n                        <div className={`w-8 h-8 ${getProficiencyColor(skill.proficiencyLevel)} rounded-full flex items-center justify-center`}>\n                          <span className=\"text-white font-bold text-sm\">\n                            {skill.proficiencyLevel || 1}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Skills Summary Stats */}\n        <div className=\"mt-16 bg-muted/50 rounded-xl p-8\">\n          <div className=\"grid md:grid-cols-5 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {Object.values(skillsByCategory).flat().length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Total Skills\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-secondary mb-2\">\n                {Object.keys(skillsByCategory).length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Skill Categories\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent mb-2\">\n                {featuredSkills.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Core Competencies\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {Object.values(skillsByCategory).flat().filter(s => (s.proficiencyLevel || 1) >= 4).length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Advanced Skills\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">\n                {Math.max(...Object.values(skillsByCategory).flat().map(s => s.yearsOfExperience || 0))}+\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Years Experience\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Proficiency Legend */}\n        <div className=\"mt-8 bg-card rounded-lg p-6 border\">\n          <h4 className=\"font-semibold text-foreground mb-4 text-center\">Proficiency Scale</h4>\n          <div className=\"flex justify-center gap-6 flex-wrap\">\n            {[\n              { level: 1, label: 'Beginner', color: 'bg-red-400' },\n              { level: 2, label: 'Novice', color: 'bg-orange-400' },\n              { level: 3, label: 'Intermediate', color: 'bg-yellow-400' },\n              { level: 4, label: 'Advanced', color: 'bg-blue-400' },\n              { level: 5, label: 'Expert', color: 'bg-green-400' }\n            ].map(({ level, label, color }) => (\n              <div key={level} className=\"flex items-center gap-2\">\n                <div className={`w-4 h-4 ${color} rounded-full`}></div>\n                <span className=\"text-sm text-muted-foreground\">{level} - {label}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":12100},"client/src/components/portfolio/product-hunt-section.tsx":{"content":"import { Award, ExternalLink } from \"lucide-react\";\n\nexport default function ProductHuntSection() {\n  return (\n    <section id=\"product-hunt\" className=\"py-20 bg-gradient-to-br from-slate-800 via-slate-700 to-slate-800 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute top-10 right-10 w-40 h-40 bg-gradient-to-r from-gold/20 to-yellow-400/20 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-10 left-10 w-32 h-32 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full blur-2xl\"></div>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12 relative z-10\">\n          <div className=\"inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-gold/20 to-yellow-400/20 border border-gold/30 text-gold mb-6 font-semibold text-sm\">\n            <Award className=\"h-4 w-4 mr-2\" />\n            Featured Products\n          </div>\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <div className=\"p-3 bg-gradient-gold rounded-xl shadow-lg\">\n              <Award className=\"h-8 w-8 text-professional\" />\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-white\">\n              Featured on Product Hunt\n            </h2>\n          </div>\n          <p className=\"text-gray-300 text-lg max-w-2xl mx-auto font-inter\">\n            Our innovative products have been recognized by the Product Hunt community, \n            showcasing cutting-edge solutions in AI, automation, and business tools.\n          </p>\n        </div>\n\n        <div className=\"space-y-16\">\n          {/* QR Generator Pro */}\n          <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n            <div className=\"space-y-6\">\n              <div className=\"text-center md:text-left\">\n                <h3 className=\"text-2xl font-bold text-white mb-4\">QR Generator Pro</h3>\n                <p className=\"text-gray-300 mb-6 font-inter\">\n                  Create and share QR codes instantly with our professional QR code generator. \n                  Advanced customization options, bulk generation, and analytics tracking.\n                </p>\n                <div className=\"flex justify-center md:justify-start\">\n                  <a \n                    href=\"https://www.producthunt.com/products/qr-generator-pro-by-ruvab-it?embed=true&utm_source=badge-featured&utm_medium=badge&utm_source=badge-qr-generator-pro-by-ruvab-it\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-product-hunt-qr-generator\"\n                  >\n                    <img \n                      src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1009570&theme=light&t=1756628251566\" \n                      alt=\"QR Generator Pro by Ruvab IT - Create & share qr codes instantly | Product Hunt\" \n                      className=\"w-[250px] h-[54px]\" \n                      width=\"250\" \n                      height=\"54\" \n                    />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex justify-center\">\n              <div className=\"professional-card p-4 achievement-highlight\">\n                <iframe \n                  style={{ border: \"none\" }} \n                  src=\"https://cards.producthunt.com/cards/products/1101960\" \n                  width=\"500\" \n                  height=\"405\" \n                  frameBorder=\"0\" \n                  scrolling=\"no\" \n                  allowFullScreen\n                  title=\"QR Generator Pro Product Hunt Card\"\n                  className=\"rounded-lg max-w-full\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* TrendSolver */}\n          <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n            <div className=\"order-2 md:order-1 flex justify-center\">\n              <div className=\"professional-card p-4 achievement-highlight\">\n                <iframe \n                  style={{ border: \"none\" }} \n                  src=\"https://cards.producthunt.com/cards/products/1101749\" \n                  width=\"500\" \n                  height=\"405\" \n                  frameBorder=\"0\" \n                  scrolling=\"no\" \n                  allowFullScreen\n                  title=\"TrendSolver Product Hunt Card\"\n                  className=\"rounded-lg max-w-full\"\n                />\n              </div>\n            </div>\n            <div className=\"order-1 md:order-2 space-y-6\">\n              <div className=\"text-center md:text-left\">\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">TrendSolver</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Your data, your insights, your success. AI-powered trend analysis platform \n                  that turns market trends into actionable business intelligence.\n                </p>\n                <div className=\"flex justify-center md:justify-start\">\n                  <a \n                    href=\"https://www.producthunt.com/products/trendsolver?embed=true&utm_source=badge-featured&utm_medium=badge&utm_source=badge-trendsolver\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-product-hunt-trendsolver\"\n                  >\n                    <img \n                      src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1009331&theme=light&t=1756628382359\" \n                      alt=\"TrendSolver - Trend Solver: Your data, your insights, your success. | Product Hunt\" \n                      className=\"w-[250px] h-[54px]\" \n                      width=\"250\" \n                      height=\"54\" \n                    />\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* FYPPAL */}\n          <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n            <div className=\"space-y-6\">\n              <div className=\"text-center md:text-left\">\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">FYPPAL</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Find Your Purpose Passion And Leap. Transform your IT experience into \n                  freelance opportunities with personalized micro-niche gig plans and professional resume reviews.\n                </p>\n                <div className=\"flex justify-center md:justify-start\">\n                  <a \n                    href=\"https://www.producthunt.com/products/fyppal?embed=true&utm_source=badge-featured&utm_medium=badge&utm_source=badge-fyppal\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-product-hunt-fyppal\"\n                  >\n                    <img \n                      src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1009554&theme=light&t=1756628436919\" \n                      alt=\"FYPPAL - Find Your Purpose Passion And Leap | Product Hunt\" \n                      className=\"w-[250px] h-[54px]\" \n                      width=\"250\" \n                      height=\"54\" \n                    />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex justify-center\">\n              <div className=\"professional-card p-4 achievement-highlight\">\n                <iframe \n                  style={{ border: \"none\" }} \n                  src=\"https://cards.producthunt.com/cards/products/1101945\" \n                  width=\"500\" \n                  height=\"405\" \n                  frameBorder=\"0\" \n                  scrolling=\"no\" \n                  allowFullScreen\n                  title=\"FYPPAL Product Hunt Card\"\n                  className=\"rounded-lg max-w-full\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* LangScribe */}\n          <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n            <div className=\"order-2 md:order-1 flex justify-center\">\n              <div className=\"professional-card p-4 achievement-highlight\">\n                <iframe \n                  style={{ border: \"none\" }} \n                  src=\"https://cards.producthunt.com/cards/products/1101355\" \n                  width=\"500\" \n                  height=\"405\" \n                  frameBorder=\"0\" \n                  scrolling=\"no\" \n                  allowFullScreen\n                  title=\"LangScribe Product Hunt Card\"\n                  className=\"rounded-lg max-w-full\"\n                />\n              </div>\n            </div>\n            <div className=\"order-1 md:order-2 space-y-6\">\n              <div className=\"text-center md:text-left\">\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">LangScribe</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  AI Powered writing assistant transforming content creation! Intelligent content \n                  creation platform with natural language processing and SEO optimization.\n                </p>\n                <div className=\"flex justify-center md:justify-start\">\n                  <a \n                    href=\"https://www.producthunt.com/products/langscribe?embed=true&utm_source=badge-featured&utm_medium=badge&utm_source=badge-langscribe\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-product-hunt-langscribe\"\n                  >\n                    <img \n                      src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1008936&theme=light&t=1756628483127\" \n                      alt=\"LangScribe - AI Powered writing assistant transforming content creation! | Product Hunt\" \n                      className=\"w-[250px] h-[54px]\" \n                      width=\"250\" \n                      height=\"54\" \n                    />\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16 relative z-10\">\n          <div className=\"professional-card bg-gradient-to-br from-gold-light/20 to-achievement-light/10 p-8 max-w-2xl mx-auto achievement-highlight\">\n            <h3 className=\"text-xl font-semibold premium-gradient mb-4\">\n              Explore Our Products\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Check out these innovative solutions and see how they can transform your business processes.\n            </p>\n            <a\n              href=\"https://ruvab.it.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-flex items-center gap-2 bg-gradient-gold text-professional px-6 py-3 rounded-lg font-semibold hover:shadow-lg transition-all duration-300\"\n              data-testid=\"button-visit-ruvab\"\n            >\n              Visit Ruvab IT\n              <ExternalLink className=\"h-4 w-4\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":11197},"client/src/components/portfolio/social-links-section.tsx":{"content":"import { ExternalLink, Globe, Award, Phone, Bot, TrendingUp, Languages, GraduationCap, QrCode, Instagram, Facebook, Youtube, Linkedin, Twitter, PenTool, Hash } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { SocialLink } from \"@shared/schema\";\n\nexport default function SocialLinksSection() {\n  const { data: socialLinksByCategory = {}, isLoading } = useQuery<Record<string, SocialLink[]>>({\n    queryKey: ['/api/social-links', 'byCategory'],\n    queryFn: async () => {\n      const response = await fetch('/api/social-links?byCategory=true');\n      return response.json();\n    }\n  });\n\n  const { data: featuredLinks = [] } = useQuery<SocialLink[]>({\n    queryKey: ['/api/social-links', 'featured'],\n    queryFn: async () => {\n      const response = await fetch('/api/social-links?featured=true');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n              Connect With Me\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading social links...\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-card rounded-lg p-6 shadow\">\n                  <div className=\"h-6 bg-muted rounded w-2/3 mb-4\"></div>\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, j) => (\n                      <div key={j} className=\"h-4 bg-muted rounded w-full\"></div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const getIcon = (iconName: string | null) => {\n    switch (iconName) {\n      case 'linkedin': return Linkedin;\n      case 'award': return Award;\n      case 'pen-tool': return PenTool;\n      case 'youtube': return Youtube;\n      case 'facebook': return Facebook;\n      case 'instagram': return Instagram;\n      case 'twitter': return Twitter;\n      case 'pinterest': return Hash;\n      case 'phone': return Phone;\n      case 'bot': return Bot;\n      case 'globe': return Globe;\n      case 'trending-up': return TrendingUp;\n      case 'languages': return Languages;\n      case 'graduation-cap': return GraduationCap;\n      case 'qr-code': return QrCode;\n      default: return ExternalLink;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'professional':\n        return 'bg-primary/10 text-primary border-primary/20';\n      case 'social':\n        return 'bg-secondary/10 text-secondary border-secondary/20';\n      case 'communication':\n        return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-900 dark:text-green-300';\n      case 'ai tools':\n        return 'bg-purple-100 text-purple-700 border-purple-200 dark:bg-purple-900 dark:text-purple-300';\n      case 'websites':\n        return 'bg-orange-100 text-orange-700 border-orange-200 dark:bg-orange-900 dark:text-orange-300';\n      default:\n        return 'bg-muted text-muted-foreground border-muted';\n    }\n  };\n\n  const handleLinkClick = (url: string) => {\n    if (url.startsWith('skype:')) {\n      window.location.href = url;\n    } else {\n      window.open(url, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const categoryOrder = ['Professional', 'Social', 'Websites', 'AI Tools', 'Communication'];\n  const sortedCategories = categoryOrder.filter(cat => socialLinksByCategory[cat]);\n  const otherCategories = Object.keys(socialLinksByCategory).filter(cat => !categoryOrder.includes(cat));\n  const allCategories = [...sortedCategories, ...otherCategories];\n\n  return (\n    <section className=\"py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-playfair font-bold text-primary mb-4\">\n            Connect With Me\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Let's connect across various platforms! Find me on social media, explore my projects, try my AI tools, and get in touch through your preferred channel.\n          </p>\n        </div>\n\n        {/* Featured Links */}\n        {featuredLinks.length > 0 && (\n          <div className=\"mb-16\">\n            <div className=\"flex items-center gap-2 mb-8 justify-center\">\n              <Award className=\"h-6 w-6 text-accent\" />\n              <h3 className=\"text-2xl font-bold text-foreground\">Featured Links</h3>\n            </div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {featuredLinks.slice(0, 8).map((link) => {\n                const IconComponent = getIcon(link.icon);\n                return (\n                  <Card \n                    key={link.id} \n                    className=\"group hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-accent/20 bg-gradient-to-br from-card to-accent/5\"\n                    onClick={() => handleLinkClick(link.url)}\n                    data-testid={`featured-link-${link.platform.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"mb-4\">\n                        <div className=\"w-12 h-12 bg-accent/20 rounded-full mx-auto mb-3 flex items-center justify-center group-hover:bg-accent/30 transition-colors\">\n                          <IconComponent className=\"h-6 w-6 text-accent\" />\n                        </div>\n                        <h4 className=\"font-bold text-foreground text-sm mb-1\">\n                          {link.platform}\n                        </h4>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {link.username || link.displayName}\n                        </p>\n                      </div>\n                      <Badge className={getCategoryColor(link.category)}>\n                        {link.category}\n                      </Badge>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Links by Category */}\n        <div className=\"space-y-12\">\n          {allCategories.map((category) => {\n            const categoryLinks = socialLinksByCategory[category] || [];\n            const CategoryIcon = category === 'Professional' ? Award : \n                                category === 'Social' ? Globe : \n                                category === 'Websites' ? Globe :\n                                category === 'AI Tools' ? Bot : Phone;\n\n            return (\n              <div key={category} className=\"space-y-6\">\n                <div className=\"flex items-center gap-3 justify-center\">\n                  <div className=\"p-2 bg-primary/10 rounded-lg\">\n                    <CategoryIcon className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-foreground\">\n                    {category}\n                  </h3>\n                  <Badge variant=\"outline\" className=\"ml-2\">\n                    {categoryLinks.length} {categoryLinks.length === 1 ? 'link' : 'links'}\n                  </Badge>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {categoryLinks.map((link) => {\n                    const IconComponent = getIcon(link.icon);\n                    return (\n                      <Card \n                        key={link.id} \n                        className=\"group hover:shadow-lg transition-all duration-300\"\n                        data-testid={`social-link-${link.platform.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"flex items-center gap-3 text-lg\">\n                            <div className=\"p-2 bg-primary/10 rounded-lg group-hover:bg-primary/20 transition-colors\">\n                              <IconComponent className=\"h-5 w-5 text-primary\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"font-bold text-foreground\">\n                                {link.platform}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {link.displayName}\n                              </div>\n                            </div>\n                            <Badge className={getCategoryColor(link.category)}>\n                              {link.category}\n                            </Badge>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <p className=\"text-sm text-muted-foreground mb-4 min-h-[2.5rem]\">\n                            {link.description}\n                          </p>\n                          <Button \n                            onClick={() => handleLinkClick(link.url)}\n                            className=\"w-full group-hover:shadow-md transition-all duration-300\"\n                            data-testid={`button-${link.platform.toLowerCase().replace(/\\s+/g, '-')}`}\n                          >\n                            <ExternalLink className=\"h-4 w-4 mr-2\" />\n                            Visit {link.platform}\n                          </Button>\n                          {link.username && (\n                            <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                              @{link.username}\n                            </p>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"mt-16 bg-card rounded-xl p-8 border\">\n          <div className=\"grid md:grid-cols-5 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {Object.values(socialLinksByCategory).flat().length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Total Links\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-secondary mb-2\">\n                {Object.keys(socialLinksByCategory).length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Categories\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent mb-2\">\n                {featuredLinks.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Featured\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {socialLinksByCategory['Professional']?.length || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Professional\n              </div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">\n                {socialLinksByCategory['Websites']?.length || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                My Projects\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-12 text-center\">\n          <p className=\"text-lg text-muted-foreground mb-6\">\n            Want to collaborate or have a question? Let's connect!\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {featuredLinks.slice(0, 3).map((link) => {\n              const IconComponent = getIcon(link.icon);\n              return (\n                <Button \n                  key={link.id}\n                  onClick={() => handleLinkClick(link.url)}\n                  variant=\"outline\"\n                  className=\"hover:shadow-lg transition-all duration-300\"\n                  data-testid={`cta-${link.platform.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <IconComponent className=\"h-4 w-4 mr-2\" />\n                  {link.platform}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":13101},"client/src/components/portfolio/youtube-videos-section.tsx":{"content":"import { Play, Youtube } from \"lucide-react\";\n\ninterface VideoData {\n  title: string;\n  url: string;\n  embedId: string;\n  description: string;\n}\n\nconst videos: VideoData[] = [\n  {\n    title: \"Discover the New Ruvab IT Website\",\n    url: \"https://youtube.com/shorts/VQ5GYuvCiXk\",\n    embedId: \"VQ5GYuvCiXk\",\n    description: \"Explore the innovative features and capabilities of our redesigned Ruvab IT platform\"\n  },\n  {\n    title: \"LangScribe - Multilingual Voice Typing & OCR Transcription\",\n    url: \"https://youtube.com/shorts/jE525mELH2I\",\n    embedId: \"jE525mELH2I\",\n    description: \"AI-powered writing assistant that transforms content creation with voice typing and OCR\"\n  },\n  {\n    title: \"TrendSolver - AI-Powered Trend Analysis & Content Creation Platform\",\n    url: \"https://youtube.com/shorts/wCrILvU-wOk\",\n    embedId: \"wCrILvU-wOk\",\n    description: \"Turn trends into instant solutions with real-time data and AI insights\"\n  },\n  {\n    title: \"FYPPAL - Find Your Passion Pal\",\n    url: \"https://youtube.com/shorts/CExpm0vTav8\",\n    embedId: \"CExpm0vTav8\",\n    description: \"Transform your IT experience into freelance opportunities with personalized guidance\"\n  },\n  {\n    title: \"QR Code Generator Pro by Ruvab IT\",\n    url: \"https://youtube.com/shorts/XG9ppxzAsPA\",\n    embedId: \"XG9ppxzAsPA\",\n    description: \"Professional QR code generation with advanced customization and analytics\"\n  }\n];\n\nexport default function YouTubeVideosSection() {\n  return (\n    <section id=\"product-videos\" className=\"py-20 bg-gradient-to-br from-background via-achievement-light/5 to-red-50/20 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute top-20 left-20 w-40 h-40 bg-red-500/10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-20 right-20 w-32 h-32 bg-achievement/10 rounded-full blur-2xl\"></div>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12 relative z-10\">\n          <div className=\"achievement-badge mx-auto mb-6 bg-red-500 text-white\">\n            <Play className=\"h-4 w-4 mr-2\" />\n            Video Showcase\n          </div>\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <div className=\"p-3 bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg\">\n              <Youtube className=\"h-8 w-8 text-white\" />\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold premium-gradient\">\n              Product Launch Videos\n            </h2>\n          </div>\n          <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n            Watch our latest product launches and discover how our innovative solutions \n            are transforming businesses across various industries.\n          </p>\n        </div>\n\n        <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3 max-w-6xl mx-auto\">\n          {videos.map((video, index) => (\n            <div \n              key={index}\n              className=\"professional-card overflow-hidden group achievement-highlight\"\n            >\n              <div className=\"relative aspect-[9/16] bg-gray-100\">\n                <iframe\n                  src={`https://www.youtube.com/embed/${video.embedId}?rel=0&modestbranding=1`}\n                  title={video.title}\n                  className=\"absolute inset-0 w-full h-full\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                />\n              </div>\n              \n              <div className=\"p-6 space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground line-clamp-2 group-hover:text-primary transition-colors\">\n                  {video.title}\n                </h3>\n                <p className=\"text-muted-foreground text-sm line-clamp-3\">\n                  {video.description}\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <a\n                    href={video.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-2 text-red-500 hover:text-red-600 font-medium transition-colors\"\n                    data-testid={`link-youtube-${index}`}\n                  >\n                    <Play className=\"h-4 w-4\" />\n                    Watch on YouTube\n                  </a>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16 relative z-10\">\n          <div className=\"professional-card bg-gradient-to-br from-red-500/10 to-achievement/10 p-8 max-w-2xl mx-auto achievement-highlight border-2 border-red-500/20\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              <Youtube className=\"h-6 w-6 text-red-500\" />\n              <h3 className=\"text-xl font-semibold premium-gradient\">\n                Subscribe for More Updates\n              </h3>\n            </div>\n            <p className=\"text-muted-foreground mb-6\">\n              Stay updated with our latest product launches and feature demonstrations.\n            </p>\n            <a\n              href=\"https://www.youtube.com/playlist?list=PLLhAtB6jd8XeoagMizKVS2RpUQmCxCEP-\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-flex items-center gap-2 bg-gradient-to-r from-red-500 to-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg transition-all duration-300 achievement-highlight\"\n              data-testid=\"button-youtube-subscribe\"\n            >\n              <Youtube className=\"h-4 w-4\" />\n              Visit YouTube Channel\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5888},"scripts/seed-social-links.ts":{"content":"import { db } from \"../server/db\";\nimport { socialLinks } from \"../shared/schema\";\n\nconst socialLinksData = [\n  // Professional Links\n  {\n    platform: \"LinkedIn\",\n    url: \"https://www.linkedin.com/in/vaibhav-selukar\",\n    username: \"vaibhav-selukar\",\n    displayName: \"Vaibhav Selukar\",\n    category: \"Professional\",\n    description: \"Connect with me on LinkedIn for professional networking and career updates\",\n    icon: \"linkedin\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 1,\n  },\n  {\n    platform: \"Credly\",\n    url: \"https://www.credly.com/users/vaibhav-selukar\",\n    username: \"vaibhav-selukar\",\n    displayName: \"Vaibhav Selukar - Credly\",\n    category: \"Professional\",\n    description: \"View my professional certifications and digital badges\",\n    icon: \"award\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 2,\n  },\n  {\n    platform: \"Medium\",\n    url: \"https://medium.com/p/a1c739a654fa\",\n    username: \"vaibhav-selukar\",\n    displayName: \"Vaibhav Selukar on Medium\",\n    category: \"Professional\",\n    description: \"Read my thought leadership articles and industry insights\",\n    icon: \"pen-tool\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 3,\n  },\n\n  // Social Media Links\n  {\n    platform: \"YouTube\",\n    url: \"https://youtube.com/shorts/aZFCWtmKb0Q\",\n    username: \"vaibhav-selukar\",\n    displayName: \"Vaibhav Selukar Video Introduction\",\n    category: \"Social\",\n    description: \"Watch my video introduction and get to know me better\",\n    icon: \"youtube\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 1,\n  },\n  {\n    platform: \"Facebook\",\n    url: \"https://www.facebook.com/vaibhav.selukar\",\n    username: \"vaibhav.selukar\",\n    displayName: \"Vaibhav Selukar\",\n    category: \"Social\",\n    description: \"Connect with me on Facebook for personal updates and community\",\n    icon: \"facebook\",\n    isVisible: true,\n    isFeatured: false,\n    sortOrder: 2,\n  },\n  {\n    platform: \"Instagram\",\n    url: \"https://www.instagram.com/vjvaibhu?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw==\",\n    username: \"vjvaibhu\",\n    displayName: \"VJ Vaibhu\",\n    category: \"Social\",\n    description: \"Follow my Instagram for lifestyle and professional moments\",\n    icon: \"instagram\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 3,\n  },\n  {\n    platform: \"Twitter\",\n    url: \"https://x.com/SelukaV\",\n    username: \"SelukaV\",\n    displayName: \"Vaibhav Selukar (@SelukaV)\",\n    category: \"Social\",\n    description: \"Follow me on X (Twitter) for industry updates and thoughts\",\n    icon: \"twitter\",\n    isVisible: true,\n    isFeatured: false,\n    sortOrder: 4,\n  },\n  {\n    platform: \"Pinterest\",\n    url: \"https://www.pinterest.com/vselukar\",\n    username: \"vselukar\",\n    displayName: \"Vaibhav Selukar\",\n    category: \"Social\",\n    description: \"Explore my Pinterest boards for creative inspiration\",\n    icon: \"pinterest\",\n    isVisible: true,\n    isFeatured: false,\n    sortOrder: 5,\n  },\n\n  // Communication Tools\n  {\n    platform: \"Skype\",\n    url: \"skype:vaibhav.selukar?chat\",\n    username: \"vaibhav.selukar\",\n    displayName: \"Vaibhav Selukar\",\n    category: \"Communication\",\n    description: \"Connect with me on Skype for professional consultations\",\n    icon: \"phone\",\n    isVisible: true,\n    isFeatured: false,\n    sortOrder: 1,\n  },\n\n  // AI Tools & Creations\n  {\n    platform: \"InterviewPro Buddy\",\n    url: \"https://aistudio.instagram.com/ai/4265674450327484?utm_source=ai_agent\",\n    username: \"interviewpro-buddy\",\n    displayName: \"InterviewPro Buddy on Instagram\",\n    category: \"AI Tools\",\n    description: \"Try my AI-powered interview preparation assistant on Instagram\",\n    icon: \"bot\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 1,\n  },\n\n  // Websites & Products\n  {\n    platform: \"Ruvab IT\",\n    url: \"https://ruvab.it.com\",\n    username: \"ruvab-it\",\n    displayName: \"Ruvab IT - Main Website\",\n    category: \"Websites\",\n    description: \"Visit our main technology solutions website\",\n    icon: \"globe\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 1,\n  },\n  {\n    platform: \"TrendSolver\",\n    url: \"https://trendsolver.ruvab.it.com\",\n    username: \"trendsolver\",\n    displayName: \"TrendSolver - Analytics Platform\",\n    category: \"Websites\",\n    description: \"Explore our trend analysis and business intelligence platform\",\n    icon: \"trending-up\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 2,\n  },\n  {\n    platform: \"LangScribe\",\n    url: \"https://langscribe.ruvab.it.com\",\n    username: \"langscribe\",\n    displayName: \"LangScribe - Language Learning\",\n    category: \"Websites\",\n    description: \"Try our AI-powered language learning and translation tool\",\n    icon: \"languages\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 3,\n  },\n  {\n    platform: \"FypPal\",\n    url: \"https://fyppal.ruvab.it.com\",\n    username: \"fyppal\",\n    displayName: \"FypPal - Academic Assistant\",\n    category: \"Websites\",\n    description: \"Academic project management and final year project assistant\",\n    icon: \"graduation-cap\",\n    isVisible: true,\n    isFeatured: true,\n    sortOrder: 4,\n  },\n  {\n    platform: \"QR Generator\",\n    url: \"https://qr-gen.ruvab.it.com\",\n    username: \"qr-gen\",\n    displayName: \"QR Gen - QR Code Generator\",\n    category: \"Websites\",\n    description: \"Generate custom QR codes for various business needs\",\n    icon: \"qr-code\",\n    isVisible: true,\n    isFeatured: false,\n    sortOrder: 5,\n  },\n];\n\nasync function seedSocialLinks() {\n  console.log(\"🌱 Seeding social links data...\");\n\n  try {\n    console.log(\"📱 Inserting social links...\");\n    \n    for (const linkData of socialLinksData) {\n      await db.insert(socialLinks).values(linkData);\n      console.log(`✓ Added ${linkData.platform} - ${linkData.displayName}`);\n    }\n\n    console.log(\"✅ Social links seeding completed successfully!\");\n    console.log(`📊 Total social links added: ${socialLinksData.length}`);\n    \n    // Summary by category\n    const categories = socialLinksData.reduce((acc, link) => {\n      acc[link.category] = (acc[link.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    console.log(\"📈 Links by category:\");\n    Object.entries(categories).forEach(([category, count]) => {\n      console.log(`  ${category}: ${count} links`);\n    });\n\n  } catch (error) {\n    console.error(\"❌ Error seeding social links:\", error);\n    throw error;\n  }\n}\n\n// Run the seed function\nseedSocialLinks()\n  .then(() => {\n    console.log(\"🎉 Social links seeding process completed!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"💥 Social links seeding failed:\", error);\n    process.exit(1);\n  });\n\nexport { seedSocialLinks };","size_bytes":6730},"client/src/components/portfolio/affiliate-partners-section.tsx":{"content":"import { ExternalLink } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst affiliatePartners = [\n  {\n    name: \"Replit\",\n    description: \"Replit turns your ideas into apps, fast.\",\n    url: \"https://replit.com/refer/vjvaibhu\",\n    category: \"Development\"\n  },\n  {\n    name: \"Namecheap\",\n    description: \"Easiest Domain setup tool for anyone. My Go-To for Domains and Hosting!\",\n    url: \"https://www.namecheap.com/\",\n    category: \"Hosting\"\n  },\n  {\n    name: \"Razorpay Payments\",\n    description: \"Effortless Payments, Powerful Results!\",\n    url: \"https://rzp.io/rzp/JADb7Mz\",\n    category: \"Payments\"\n  },\n  {\n    name: \"Sendgrid\",\n    description: \"The trusted platform for delivering your emails, reliably and at scale.\",\n    url: \"https://sendgrid.com/en-us?ref=ruvab\",\n    category: \"Email\"\n  },\n  {\n    name: \"Zoho\",\n    description: \"Your business, simplified with a single suite of powerful tools.\",\n    url: \"https://go.zoho.com/vJp\",\n    category: \"Business\"\n  },\n  {\n    name: \"NEWSNOWAPI\",\n    description: \"Breaking news from every source, instantly.\",\n    url: \"https://rapidapi.com/newsnow/api/newsnow?ref=ruvab\",\n    category: \"API\"\n  },\n  {\n    name: \"NEWSAPI\",\n    description: \"The fastest way to get global headlines and news data.\",\n    url: \"https://newsapi.ai/?referral=d3a6f77249054b37942a5d9a9db36ad9\",\n    category: \"API\"\n  },\n  {\n    name: \"Fiverr Marketplace\",\n    description: \"The global marketplace for freelance services, starting at just five dollars.\",\n    url: \"https://go.fiverr.com/visit/?bta=1141546&brand=fiverrmarketplace\",\n    category: \"Freelance\"\n  },\n  {\n    name: \"Fiverr Pro\",\n    description: \"Premium freelance services for professional projects.\",\n    url: \"https://go.fiverr.com/visit/?bta=1141546&brand=fp\",\n    category: \"Freelance\"\n  },\n  {\n    name: \"Logo Maker\",\n    description: \"Professional logo design made simple.\",\n    url: \"https://go.fiverr.com/visit/?bta=1141546&brand=logomaker\",\n    category: \"Design\"\n  },\n  {\n    name: \"Fiverr Affiliates\",\n    description: \"Join the Fiverr affiliate program.\",\n    url: \"https://go.fiverr.com/visit/?bta=1141546&brand=fiverraffiliates\",\n    category: \"Affiliate\"\n  },\n  {\n    name: \"Canva\",\n    description: \"Design anything, publish anywhere, with zero effort.\",\n    url: \"https://www.canva.com/join/xtb-zqc-cqc\",\n    category: \"Design\"\n  }\n];\n\nconst getCategoryColor = (category: string) => {\n  switch (category) {\n    case \"Development\":\n      return \"bg-gradient-to-r from-blue-500 to-cyan-500\";\n    case \"Hosting\":\n      return \"bg-gradient-to-r from-green-500 to-emerald-500\";\n    case \"Payments\":\n      return \"bg-gradient-to-r from-purple-500 to-pink-500\";\n    case \"Email\":\n      return \"bg-gradient-to-r from-red-500 to-orange-500\";\n    case \"Business\":\n      return \"bg-gradient-to-r from-indigo-500 to-purple-500\";\n    case \"API\":\n      return \"bg-gradient-to-r from-yellow-500 to-orange-500\";\n    case \"Freelance\":\n      return \"bg-gradient-to-r from-teal-500 to-green-500\";\n    case \"Design\":\n      return \"bg-gradient-to-r from-pink-500 to-rose-500\";\n    case \"Affiliate\":\n      return \"bg-gradient-to-r from-amber-500 to-yellow-500\";\n    default:\n      return \"bg-gradient-to-r from-gray-500 to-slate-500\";\n  }\n};\n\nexport default function AffiliatePartnersSection() {\n  return (\n    <section className=\"section-padding bg-gradient-to-b from-background via-primary/3 to-background\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-20\">\n          <h2 className=\"gradient-text text-5xl lg:text-6xl font-playfair font-bold mb-6\">\n            Affiliate Partners\n          </h2>\n          <p className=\"text-xl lg:text-2xl text-muted-foreground max-w-4xl mx-auto leading-relaxed font-inter\">\n            Trusted tools and services I use and recommend for building amazing digital experiences\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {affiliatePartners.map((partner, index) => (\n            <Card \n              key={index} \n              className=\"card-elevated group hover:scale-105 transition-all duration-300 cursor-pointer\"\n              onClick={() => window.open(partner.url, '_blank')}\n              data-testid={`affiliate-card-${partner.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className={`inline-block px-3 py-1 rounded-full text-xs font-bold text-white mb-3 ${getCategoryColor(partner.category)}`}>\n                      {partner.category}\n                    </div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-2 group-hover:text-accent transition-colors\">\n                      {partner.name}\n                    </h3>\n                  </div>\n                  <ExternalLink className=\"h-5 w-5 text-muted-foreground group-hover:text-accent transition-colors flex-shrink-0 ml-2\" />\n                </div>\n                \n                <p className=\"text-muted-foreground leading-relaxed text-sm\">\n                  {partner.description}\n                </p>\n\n                <div className=\"mt-4 pt-4 border-t border-border\">\n                  <div className=\"flex items-center text-accent font-medium text-sm group-hover:underline\">\n                    <span>Visit Partner</span>\n                    <ExternalLink className=\"h-4 w-4 ml-1\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-16 text-center\">\n          <div className=\"inline-flex items-center px-6 py-3 rounded-full card-modern border border-accent/30 text-accent font-bold text-sm backdrop-blur-xl\">\n            <span className=\"mr-2\">💼</span>\n            Affiliate Disclosure: Some links may earn commission at no extra cost to you\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6087},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\n// Template for contact form notification email\nexport function createContactFormNotificationEmail(contactData: {\n  name: string;\n  email: string;\n  subject?: string | null;\n  message: string;\n  submittedAt: string;\n}) {\n  const subject = `New Contact Form Submission: ${contactData.subject || 'General Inquiry'}`;\n  \n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8f9fa;\">\n      <div style=\"background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <h2 style=\"color: #2c3e50; margin-bottom: 20px; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">\n          New Contact Form Submission\n        </h2>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <h3 style=\"color: #34495e; margin-bottom: 10px;\">Contact Details:</h3>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; color: #555; width: 120px;\">Name:</td>\n              <td style=\"padding: 8px 0; color: #333;\">${contactData.name}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Email:</td>\n              <td style=\"padding: 8px 0; color: #333;\">${contactData.email}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Subject:</td>\n              <td style=\"padding: 8px 0; color: #333;\">${contactData.subject || 'General Inquiry'}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Submitted:</td>\n              <td style=\"padding: 8px 0; color: #333;\">${contactData.submittedAt}</td>\n            </tr>\n          </table>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <h3 style=\"color: #34495e; margin-bottom: 10px;\">Message:</h3>\n          <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 4px; border-left: 4px solid #3498db;\">\n            <p style=\"margin: 0; line-height: 1.6; color: #333;\">${contactData.message.replace(/\\n/g, '<br>')}</p>\n          </div>\n        </div>\n        \n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef; text-align: center;\">\n          <p style=\"color: #6c757d; font-size: 14px; margin: 0;\">\n            This email was sent from the Vaibhav Selukar Portfolio contact form.\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const text = `\nNew Contact Form Submission\n\nName: ${contactData.name}\nEmail: ${contactData.email}\nSubject: ${contactData.subject || 'General Inquiry'}\nSubmitted: ${contactData.submittedAt}\n\nMessage:\n${contactData.message}\n\n---\nThis email was sent from the Vaibhav Selukar Portfolio contact form.\n  `;\n\n  return { subject, html, text };\n}\n\n// Template for weekly summary email\nexport function createWeeklySummaryEmail(contactSubmissions: Array<{\n  id: string;\n  name: string;\n  email: string;\n  subject?: string | null;\n  message: string;\n  isRead: boolean | null;\n  createdAt: Date | null;\n}>, weekStartDate: string, weekEndDate: string) {\n  const subject = `Weekly Contact Form Summary - ${weekStartDate} to ${weekEndDate}`;\n  \n  const totalSubmissions = contactSubmissions.length;\n  const unreadSubmissions = contactSubmissions.filter(sub => sub.isRead === false || sub.isRead === null).length;\n  \n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f8f9fa;\">\n      <div style=\"background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <h2 style=\"color: #2c3e50; margin-bottom: 20px; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">\n          Weekly Contact Form Summary\n        </h2>\n        \n        <div style=\"margin-bottom: 25px;\">\n          <h3 style=\"color: #34495e; margin-bottom: 15px;\">Summary for ${weekStartDate} to ${weekEndDate}</h3>\n          <div style=\"display: flex; gap: 20px; margin-bottom: 20px;\">\n            <div style=\"background-color: #e8f4f8; padding: 15px; border-radius: 6px; text-align: center; flex: 1;\">\n              <div style=\"font-size: 24px; font-weight: bold; color: #2c3e50;\">${totalSubmissions}</div>\n              <div style=\"color: #34495e; font-size: 14px;\">Total Submissions</div>\n            </div>\n            <div style=\"background-color: ${unreadSubmissions > 0 ? '#fff3cd' : '#d4edda'}; padding: 15px; border-radius: 6px; text-align: center; flex: 1;\">\n              <div style=\"font-size: 24px; font-weight: bold; color: #2c3e50;\">${unreadSubmissions}</div>\n              <div style=\"color: #34495e; font-size: 14px;\">Unread Messages</div>\n            </div>\n          </div>\n        </div>\n        \n        ${totalSubmissions > 0 ? `\n        <div style=\"margin-bottom: 20px;\">\n          <h3 style=\"color: #34495e; margin-bottom: 15px;\">Contact Submissions:</h3>\n          <div style=\"overflow-x: auto;\">\n            <table style=\"width: 100%; border-collapse: collapse; background-color: white;\">\n              <thead>\n                <tr style=\"background-color: #f8f9fa;\">\n                  <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; color: #495057; font-weight: 600;\">Date</th>\n                  <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; color: #495057; font-weight: 600;\">Name</th>\n                  <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; color: #495057; font-weight: 600;\">Email</th>\n                  <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; color: #495057; font-weight: 600;\">Subject</th>\n                  <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; color: #495057; font-weight: 600;\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${contactSubmissions.map(submission => `\n                  <tr style=\"border-bottom: 1px solid #dee2e6;\">\n                    <td style=\"padding: 12px; color: #495057;\">${submission.createdAt ? new Date(submission.createdAt).toLocaleDateString() : 'N/A'}</td>\n                    <td style=\"padding: 12px; color: #495057;\">${submission.name}</td>\n                    <td style=\"padding: 12px; color: #495057;\">${submission.email}</td>\n                    <td style=\"padding: 12px; color: #495057;\">${submission.subject || 'General Inquiry'}</td>\n                    <td style=\"padding: 12px;\">\n                      <span style=\"padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; \n                                   background-color: ${submission.isRead ? '#d4edda' : '#fff3cd'}; \n                                   color: ${submission.isRead ? '#155724' : '#856404'};\">\n                        ${submission.isRead ? 'Read' : 'Unread'}\n                      </span>\n                    </td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        ` : `\n        <div style=\"text-align: center; padding: 40px 20px; background-color: #f8f9fa; border-radius: 6px;\">\n          <p style=\"color: #6c757d; font-size: 16px; margin: 0;\">No contact form submissions received this week.</p>\n        </div>\n        `}\n        \n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef; text-align: center;\">\n          <p style=\"color: #6c757d; font-size: 14px; margin: 0;\">\n            This is an automated weekly summary from Vaibhav Selukar Portfolio website.\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const text = `\nWeekly Contact Form Summary - ${weekStartDate} to ${weekEndDate}\n\nSummary:\n- Total Submissions: ${totalSubmissions}\n- Unread Messages: ${unreadSubmissions}\n\n${totalSubmissions > 0 ? `\nContact Submissions:\n${contactSubmissions.map(submission => `\n- ${submission.createdAt ? new Date(submission.createdAt).toLocaleDateString() : 'N/A'} | ${submission.name} (${submission.email})\n  Subject: ${submission.subject || 'General Inquiry'}\n  Status: ${submission.isRead ? 'Read' : 'Unread'}\n`).join('')}\n` : 'No contact form submissions received this week.'}\n\n---\nThis is an automated weekly summary from Vaibhav Selukar Portfolio website.\n  `;\n\n  return { subject, html, text };\n}","size_bytes":9168},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { storage } from './storage';\nimport type { UserSignUp, UserSignIn } from '@shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\nconst JWT_EXPIRES_IN = '7d';\n\nexport interface AuthResult {\n  success: boolean;\n  user?: any;\n  token?: string;\n  message?: string;\n}\n\nexport class AuthService {\n  // Hash password\n  private async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n  }\n\n  // Verify password\n  private async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  // Generate JWT token\n  private generateToken(userId: string): string {\n    return jwt.sign({ userId }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n  }\n\n  // Verify JWT token\n  public verifyToken(token: string): { userId: string } | null {\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n      return decoded;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Generate reset password token\n  private generateResetToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  // Sign up new user\n  async signUp(userData: UserSignUp): Promise<AuthResult> {\n    try {\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return {\n          success: false,\n          message: 'User with this email already exists'\n        };\n      }\n\n      // Hash password\n      const hashedPassword = await this.hashPassword(userData.password);\n\n      // Create user\n      const newUser = await storage.createLocalUser({\n        email: userData.email,\n        password: hashedPassword,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        isEmailVerified: false\n      });\n\n      // Generate token\n      const token = this.generateToken(newUser.id);\n\n      return {\n        success: true,\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          isEmailVerified: newUser.isEmailVerified\n        },\n        token\n      };\n    } catch (error) {\n      console.error('Sign up error:', error);\n      return {\n        success: false,\n        message: 'Failed to create account'\n      };\n    }\n  }\n\n  // Sign in user\n  async signIn(credentials: UserSignIn): Promise<AuthResult> {\n    try {\n      // Get user by email\n      const user = await storage.getUserByEmail(credentials.email);\n      if (!user || !user.password) {\n        return {\n          success: false,\n          message: 'Invalid email or password'\n        };\n      }\n\n      // Verify password\n      const isValidPassword = await this.verifyPassword(credentials.password, user.password);\n      if (!isValidPassword) {\n        return {\n          success: false,\n          message: 'Invalid email or password'\n        };\n      }\n\n      // Update last login\n      await storage.updateUserLastLogin(user.id);\n\n      // Generate token\n      const token = this.generateToken(user.id);\n\n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          isEmailVerified: user.isEmailVerified,\n          isAdmin: user.isAdmin\n        },\n        token\n      };\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return {\n        success: false,\n        message: 'Failed to sign in'\n      };\n    }\n  }\n\n  // Request password reset\n  async requestPasswordReset(email: string): Promise<AuthResult> {\n    try {\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return {\n          success: true,\n          message: 'If an account with this email exists, you will receive a password reset link'\n        };\n      }\n\n      // Generate reset token\n      const resetToken = this.generateResetToken();\n      const resetExpires = new Date(Date.now() + 3600000); // 1 hour\n\n      // Save reset token\n      await storage.savePasswordResetToken(user.id, resetToken, resetExpires);\n\n      // Send email (integrate with SendGrid)\n      try {\n        const { sendEmail } = await import('./sendgrid');\n        await sendEmail({\n          to: email,\n          from: 'noreply@ruvab.it.com',\n          subject: 'Password Reset Request',\n          html: `\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n              <h2>Password Reset Request</h2>\n              <p>Hi ${user.firstName},</p>\n              <p>You requested a password reset for your account. Click the link below to reset your password:</p>\n              <p><a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}\" \n                     style=\"background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n                Reset Password\n              </a></p>\n              <p>This link will expire in 1 hour.</p>\n              <p>If you didn't request this, please ignore this email.</p>\n            </div>\n          `,\n          text: `\n            Hi ${user.firstName},\n            \n            You requested a password reset for your account. Visit this link to reset your password:\n            ${process.env.FRONTEND_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}\n            \n            This link will expire in 1 hour.\n            \n            If you didn't request this, please ignore this email.\n          `\n        });\n      } catch (emailError) {\n        console.error('Error sending reset email:', emailError);\n      }\n\n      return {\n        success: true,\n        message: 'If an account with this email exists, you will receive a password reset link'\n      };\n    } catch (error) {\n      console.error('Password reset request error:', error);\n      return {\n        success: false,\n        message: 'Failed to process password reset request'\n      };\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Get user by reset token\n      const user = await storage.getUserByResetToken(token);\n      if (!user || !user.resetPasswordExpires || user.resetPasswordExpires < new Date()) {\n        return {\n          success: false,\n          message: 'Invalid or expired reset token'\n        };\n      }\n\n      // Hash new password\n      const hashedPassword = await this.hashPassword(newPassword);\n\n      // Update password and clear reset token\n      await storage.updateUserPassword(user.id, hashedPassword);\n\n      return {\n        success: true,\n        message: 'Password updated successfully'\n      };\n    } catch (error) {\n      console.error('Password reset error:', error);\n      return {\n        success: false,\n        message: 'Failed to reset password'\n      };\n    }\n  }\n\n  // Get user from token\n  async getUserFromToken(token: string): Promise<any | null> {\n    try {\n      const decoded = this.verifyToken(token);\n      if (!decoded) return null;\n\n      const user = await storage.getUser(decoded.userId);\n      if (!user) return null;\n\n      return {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        isEmailVerified: user.isEmailVerified,\n        isAdmin: user.isAdmin\n      };\n    } catch (error) {\n      console.error('Get user from token error:', error);\n      return null;\n    }\n  }\n}\n\nexport const authService = new AuthService();","size_bytes":7859}},"version":1}